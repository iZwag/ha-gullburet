# MDB = MasterDim Brigthness
- id: '1708515045819'
  alias: Lights - Masterdim ALL lights
  description: Masterdims the brightness of lights in all the activity-rooms. The exceptions are Bedroom, Guest room and Storage-room. Only applied to lights with adjustable brightness.
  trigger:
  - platform: state
    entity_id: input_number.apartment_dimmer
  condition: []
  action:
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_veranda', 'on') }}"
      light_entity: light.wall_lantern_veranda
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Veranda wall lantern
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_kitchen', 'on') }}"
      light_entity: light.spottrack6_kitchen
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Kitchen 6-track
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_kitchen', 'on') }}"
      light_entity: light.pendants_kitchen
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Kitchen pendants
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_living', 'on') }}"
      light_entity: light.pendants_living
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Living pendants
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_living', 'on') }}"
      light_entity: light.downlights_living
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Living downlights
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_living', 'on') }}"
      light_entity: light.spottrack4_living
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Living 4-track
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_living', 'on') }}"
      light_entity: light.mood_ball
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Living mood ball
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_entry', 'on') }}"
      light_entity: light.downlights_entry
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Entry downlights
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_office', 'on') }}"
      light_entity: light.pendants_office
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Office pendants
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_bath', 'on') }}"
      light_entity: light.lightstrip_bath
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Bath lightstrip
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: "{{ is_state('input_boolean.lights_override_bath', 'on') }}"
      light_entity: light.downlights_bath
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Bath downlights
  - service: script.masterdim_script
    metadata: {}
    data:
      manual_override: false
      light_entity: light.downlight_toilet
      brightness: "{{ states('input_number.apartment_dimmer') }}"
    alias: Masterdim Toilet downlight
  mode: queued
- id: mdb201
  alias: MDB Office 3-pendants
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.pendants_office
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb202
  alias: MDB Bedroom Pendant
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.pendant_bedroom
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb203
  alias: MDB Bedroom Closet
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.closet_lights_lys
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb204
  alias: MDB Guestroom Cloud
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.pendant_guest
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb301
  alias: MDB Bathroom Downlights
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.downlights_bath
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb302
  alias: MDB Bathroom Strip
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.lightstrip_bath
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb303
  alias: MDB Toilet Downlight
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.downlight_toilet
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb101
  alias: MDB Kitchen 6-track
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.spottrack6_kitchen
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb102
  alias: MDB Kitchen Flowerpots
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.pendants_kitchen
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb103
  alias: MDB Kitchen Pendants
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.pendants_living
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb104
  alias: MDB Livingroom 4-track
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.spottrack4_living
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb105
  alias: MDB Livingroom Downlights
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.downlights_living
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"
- id: mdb106
  alias: MDB Entry downlights
  description: Masterdim brightness
  use_blueprint:
    path: homeassistant/masterdim_light.yaml
    input:
      light_entity: light.downlights_entry
      brightness_value: "{{ states('input_number.apartment_dimmer') | int }}"

- id: '1707168721809'
  alias: Auto masterdim with Sun-cycle
  description: Automatically adjusts the brightness of all lights in the apartment
    (masterdim) at 8 times during the suns cycle.
  trigger:
  - platform: time
    at: sensor.sun_next_midnight
    id: midnight
  - platform: time
    at: sensor.sun_next_dawn
    id: dawn
  - platform: time
    at: sensor.sun_next_rising
    id: sunrise
  - platform: time
    at: input_datetime.risenoon
    id: risenoon
  - platform: time
    at: sensor.sun_next_noon
    id: noon
  - platform: time
    at: input_datetime.noonset
    id: noonset
  - platform: time
    at: sensor.sun_next_setting
    id: sunset
  - platform: time
    at: sensor.sun_next_dusk
    id: dusk
  condition:
  - condition: state
    entity_id: input_boolean.auto_suncycle_masterdim
    state: 'on'
  action:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - midnight
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_lowest'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Dawn
          event_time: '{{ states(''sensor.sun_next_dawn'') }}'
    - conditions:
      - condition: trigger
        id:
        - dawn
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_low'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Sunrise
          event_time: '{{ states(''sensor.sun_next_rising'') }}'
    - conditions:
      - condition: trigger
        id:
        - sunrise
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_medium'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Risenoon
          event_time: '{{ states(''input_datetime.risenoon'') }}'
    - conditions:
      - condition: trigger
        id:
        - risenoon
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_high'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Noon
          event_time: '{{ states(''sensor.sun_next_noon'') }}'
    - conditions:
      - condition: trigger
        id:
        - noon
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_highest'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Noonset
          event_time: '{{ states(''input_datetime.noonset'') }}'
    - conditions:
      - condition: trigger
        id:
        - noonset
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_high'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Sunset
          event_time: '{{ states(''sensor.sun_next_setting'') }}'
    - conditions:
      - condition: trigger
        id:
        - sunset
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_medium'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Dusk
          event_time: '{{ states(''sensor.sun_next_dusk'') }}'
    - conditions:
      - condition: trigger
        id:
        - dusk
      sequence:
      - service: input_number.set_value
        data:
          value: '{{ states(''input_number.dimconstant_low'') | int }}'
        target:
          entity_id: input_number.apartment_dimmer
      - service: script.sun_cycle_set_next_event_text
        metadata: {}
        data:
          next_sun_event: Midnight
          event_time: '{{ states(''sensor.sun_next_midnight'') }}'
  mode: single

- id: "1703000590222"
  alias: Calculate RiseNoon and NoonSet at Midnight
  description:
    Calculates the daily middle-times between Sunrise and Noon, and Noon
    and Sunset at midnight
  trigger:
    - platform: time
      at: sensor.sun_next_midnight
  condition: []
  action:
    - service: script.calculate_risenoon
      data: {}
    - service: script.calculate_noonset
      data: {}
  mode: single
