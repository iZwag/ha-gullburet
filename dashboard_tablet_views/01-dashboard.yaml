title: Dashboard
path: dashboard
background: center / cover no-repeat url("/local/ui/bg-gradient3.png") fixed
type: "custom:ha-dashboard"
theme: ios-dark-mode
badges: []
usePanel: true
sidebar:
  screenMinWidth: 828
  buttons: []
  stickyCards:
    - type: picture-elements
      image: "/local/ui/clck-background.png"
      elements:
        - type: state-label
          entity: sensor.time
          hold_action:
            action: none
          style:
            color: var(--primary-text-color)
            font-size: 5.41vw
            font-weight: 200
            left: 16%
            letter-spacing: "-0.05vw"
            max-width: 1px
            top: 37.5%
            pointer-events: none
          tap_action:
            action: none
        - type: state-label
          entity: sensor.date_string
          hold_action:
            action: none
          style:
            color: var(--secondary-text-color)
            font-size: 1.3vw
            font-weight: 300
            left: 31.5%
            letter-spacing: "-0.05vw"
            text-align: left
            top: 65%
            width: 30%
            pointer-events: none
          tap_action:
            action: none
  cards:
    - type: custom:stack-in-card
      mode: vertical
      keep:
        border_radius: true
        margin: true
        box_shadow: true
        background: true
      card_mod:
        style: |
          ha-card {
            padding: 0% 1% 0% 1%;
          }
      cards:
        - type: "custom:button-card"
          icon: mdi:home
          name: Dashboard
          template: navbar_button
          variables:
            link_active: "true"
          tap_action:
            action: navigate
            navigation_path: /dashboard-tablet/dashboard
        - type: "custom:button-card"
          icon: mdi:floor-plan
          name: Floorplan control
          template: navbar_button
          tap_action:
            action: navigate
            navigation_path: /dashboard-tablet/floorplan
        - type: "custom:button-card"
          icon: mdi:bed
          name: Bedtime & wake-up
          template: navbar_button
          tap_action:
            action: navigate
            navigation_path: /dashboard-tablet/sleep
        - type: "custom:button-card"
          icon: mdi:chart-bar
          name: Consumption
          template: navbar_button
          tap_action:
            action: navigate
            navigation_path: /dashboard-tablet/consumption
        - type: "custom:button-card"
          icon: mdi:star
          name: Special
          template: navbar_button
          tap_action:
            action: navigate
            navigation_path: /dashboard-tablet/special
        - type: "custom:button-card"
          icon: mdi:speaker
          name: Listen
          template: navbar_button
          tap_action:
            action: navigate
            navigation_path: /dashboard-tablet/audio
        # VERTICAL SPACER ELEMENT: ADJUST THE HEIGHT AS NEEDED
        - type: "custom:button-card"
          color_type: blank_card
          styles:
            card:
              - height: 25vh
        - type: custom:mushroom-chips-card
          alignment: center
          card_mod:
            style: |
              ha-card {
                --chip-background: rgba(25, 25, 25, 0.2);
                --primary-text-color: var(--secondary-text-color);
              }
          chips:
          - type: action
            tap_action:
              action: navigate
              navigation_path: /lovelace/0
            icon: mdi:cog
          - type: entity
            entity: sensor.temperature_apartment_avg
          - type: weather
            entity: weather.yr_weather_home
            show_temperature: true
            show_conditions: true
cards:
  - type: "custom:bootstrap-grid-card"
    #container_padding: 10px
    #use_hass_style_gutter: true
    #hass_style_gutter_size: "10px"
    cards:
      - type: row
        cards:
        # #####################################################################
        # WEATHER FORECAST SECTION
        - type: vertical-stack
          class: "col-xs-8 col-md-6 col-xxl-3"
          cards:
            - type: custom:weather-card
              entity: weather.yr_weather_home
              name: Oslo
              details: false
              hide_precipitation: false
              card_mod:
                style: |
                  ha-card {
                    padding: var(--ha-card-padding) var(--ha-card-padding) 0 !important;
                    background-color: transparent;
                  }
            - type: custom:apexcharts-card
              card_mod:
                style: |
                  ha-card {
                    padding: 0 var(--ha-card-padding) !important;
                    background-color: transparent;
                  }
              apex_config:
                legend:
                  show: false
                chart:
                  height: 160px
                markers:
                  size: 3
                  strokeColors: '#000'
                  strokeOpacity: 0
                grid:
                  show: false
              graph_span: 23h
              #layout: minimal
              span:
                start: hour
              header:
                show: false
                title: 'Weather forecast next 24hours'
                show_states: false
              yaxis:
              - id: temp
                decimals: 1
                apex_config:
                  tickAmount: 4
                min: ~0
              - id: precip
                decimals: 1
                opposite: true
                show: false
                min: 0
                max: ~2
                apex_config:
                  tickAmount: 4
              series:
                - entity: sensor.yr_weather_forecast_hourly
                  name: Temperatur
                  yaxis_id: temp
                  unit: ' °C'
                  stroke_width: 3
                  float_precision: 1
                  data_generator: |
                    return entity.attributes.forecast.map((entry) => {
                      return [new Date(entry.datetime).getTime(), entry.temperature];
                    });
                - entity: sensor.yr_weather_forecast_hourly
                  name: Nedbør
                  yaxis_id: precip
                  type: column
                  unit: ' mm'
                  float_precision: 1
                  data_generator: |
                    return entity.attributes.forecast.map((entry) => {
                      return [new Date(entry.datetime).getTime(), entry.precipitation];
                    });
            # #################################################################
            # PUBLIC TRANSPORT SECTION
            # Swipe-carousel
            - type: custom:swipe-card
              start_card: 1
              reset_after: 600
              cards:
              # Sandaker Senter, trikk
              - type: custom:ruter-stop-info
                entities:
                  - sensor.ruter_sandaker_senter_platform_11752
                  - sensor.ruter_sandaker_senter_platform_11755
                show_departures: 3
                walking_distance: 4
              # Torshov, buss
              - type: "custom:ruter-stop-info"
                entities:
                  - sensor.ruter_torshov_platform_11734
                  - sensor.ruter_torshov_platform_11733
                show_departures: 3
                walking_distance: 7
              # Storo, t-bane
              - type: custom:ruter-stop-info
                entities:
                  - sensor.ruter_storo_platform_1
                  - sensor.ruter_storo_platform_2
                show_departures: 3
                walking_distance: 7
              # Haarklous plass, buss
              - type: "custom:ruter-stop-info"
                entities:
                  - sensor.ruter_haarklous_plass_platform_11766
                  - sensor.ruter_haarklous_plass_platform_11768
                show_departures: 3
                walking_distance: 5
        # #####################################################################
        # ENERGY SECTION
        - type: custom:stack-in-card
          mode: vertical
          class: "col-xs-8 col-md-6 col-xxl-3"
          card_mod:
            style: |
              ha-card {
                height: 100%;
                background: transparent;
              }
          cards:
          # Energy prices (now) today & tomorrow
          # Wrap it in a config-template-card only to enable:
          # - 24h-view before 13:00, when tomorrow's Tibber forecast arrives
          # - 48h-view after 13:00
          - type: conditional
            conditions:
            - condition: "state"
              entity: sensor.power_price_chart_state
              state: 24h
            card:
              type: custom:apexcharts-card
              card_mod:
                style: |
                  ha-card {
                    padding: var(--ha-card-padding) !important;
                    background-color: transparent;
                  }
                  #header {
                    padding: 0 16px !important;
                  }
                  #header__title {
                    font-size: 1em !important;
                    font-weight: regular !important;
                    color: var(--primary-text-color) !important;
                  }
              apex_config:
                legend:
                  show: false
                grid:
                  show: false
                chart:
                  height: 200px
                  # Stacking is nice, but Apexcharts is having trouble
                  # auto-adjusting max y-axis values, so the top values
                  # disappears from the view. 
                  # Disabled until it is fixed.
                  #stacked: true
                tooltip:
                  enabled: true
                  shared: true
                  #hideEmptySeries: true
                  followCursor: true
                  #intersect: false
                  #x:
                  #  show: false
                #xaxis:
                #  labels:
                #    datetimeFormatter:
                #      hour: HH
              header:
                show: true
                title: 'Energy prices now & today'
                show_states: true
                colorize_states: true
              now:
                show: true
                color: '#d24dff'
              graph_span: 23h
              span:
                start: day
              yaxis:
                - id: kwh
                  decimals: 0
                  apex_config:
                    tickAmount: 5
                  min: 0
              series:
                - entity: sensor.elvia_variable_pricing
                  name: Elvia
                  show:
                    in_header: false
                    name_in_header: false
                  type: line
                  unit: ' øre/kWh'
                  curve: stepline
                  yaxis_id: kwh
                  stroke_width: 3
                  float_precision: 0
                  data_generator: |
                    const midnight = new Date()
                    midnight.setHours(0, 0, 0, 0)
                    const prices = entity.attributes.hours
                    const data = [];
                    for(let i = 0; i < prices.length; i++) {
                      data.push([midnight.getTime() + i * 1000 * 3600, prices[i].energyPrice.total * 100])
                    }
                    return data;
                - entity: sensor.tibber_prices
                  name: Tibber
                  show:
                    in_header: false
                    name_in_header: false
                  type: line
                  unit: ' øre/kWh'
                  curve: stepline
                  yaxis_id: kwh
                  stroke_width: 3
                  float_precision: 0
                  data_generator: |
                    const noon = new Date()
                    noon.setHours(0, 0, 0, 0)
                    const prices = entity.attributes.today.concat(entity.attributes.tomorrow);
                    const data = [];
                    for(let i = 0; i < prices.length; i++) {
                      data.push([noon.getTime() + i * 1000 * 3600, prices[i].total * 100])
                    }
                    return data;
                - entity: sensor.power_hourly_total
                  name: 'Right now'
                  show:
                    in_chart: false
                    name_in_header: false
                  unit: ' øre/kWh'
                  float_precision: 0
                  color: '#d24dff'
                  data_generator: |
                    const total_nok = parseFloat(entity.state);
                    return [[new Date().getTime(), total_nok*100]];
                  #color_threshold:
                  #- value: 0
                  #  color: 4DD0E1
                  #- value: 10
                  #  color: 26A69A
                  #- value: 15
                  #  color: 4CAF50
                  #- value: 20
                  #  color: 7CB342
                  #- value: 25
                  #  color: FBC02D
                  #- value: 30
                  #  color: EF6C00
                  #- value: 40
                  #  color: B71C1C
              #experimental:
              #  color_threshold: true
          - type: conditional
            conditions:
            - condition: "state"
              entity: sensor.power_price_chart_state
              state: 48h
            card:
              type: custom:apexcharts-card
              card_mod:
                style: |
                  ha-card {
                    padding: var(--ha-card-padding) !important;
                    background-color: transparent;
                  }
                  #header {
                    padding: 0 16px !important;
                  }
                  #header__title {
                    font-size: 1em !important;
                    font-weight: regular !important;
                    color: var(--primary-text-color) !important;
                  }
              apex_config:
                legend:
                  show: false
                grid:
                  show: false
                chart:
                  height: 200px
                tooltip:
                  enabled: true
                  shared: true
                  followCursor: true
              header:
                show: true
                title: 'Energy prices today & tomorrow'
                show_states: true
                colorize_states: true
              now:
                show: true
                color: '#d24dff'
              graph_span: 48h
              span:
                start: day
              yaxis:
                - id: kwh
                  decimals: 0
                  apex_config:
                    tickAmount: 5
                  min: 0
              series:
                - entity: sensor.elvia_variable_pricing
                  name: Elvia
                  show:
                    in_header: false
                    name_in_header: false
                  type: line
                  unit: ' øre/kWh'
                  curve: stepline
                  yaxis_id: kwh
                  stroke_width: 3
                  float_precision: 0
                  data_generator: |
                    const midnight = new Date()
                    midnight.setHours(0, 0, 0, 0)
                    const prices = entity.attributes.hours
                    const data = [];
                    for(let i = 0; i < prices.length; i++) {
                      data.push([midnight.getTime() + i * 1000 * 3600, prices[i].energyPrice.total * 100])
                    }
                    return data;
                - entity: sensor.tibber_prices
                  name: Tibber
                  show:
                    in_header: false
                    name_in_header: false
                  type: line
                  unit: ' øre/kWh'
                  curve: stepline
                  yaxis_id: kwh
                  stroke_width: 3
                  float_precision: 0
                  data_generator: |
                    const noon = new Date()
                    noon.setHours(0, 0, 0, 0)
                    const prices = entity.attributes.today.concat(entity.attributes.tomorrow);
                    const data = [];
                    for(let i = 0; i < prices.length; i++) {
                      data.push([noon.getTime() + i * 1000 * 3600, prices[i].total * 100])
                    }
                    return data;
                - entity: sensor.power_hourly_total
                  name: 'Right now'
                  show:
                    in_chart: false
                    name_in_header: false
                  unit: ' øre/kWh'
                  float_precision: 0
                  color: '#d24dff'
                  data_generator: |
                    const total_nok = parseFloat(entity.state);
                    return [[new Date().getTime(), total_nok*100]];
          - type: gauge
            entity: sensor.power_asengata_6a
            min: 0
            max: 8800
            needle: false
            severity:
              green: 1
              yellow: 2000
              red: 5000
            name: Realtime power consumption
            card_mod:
              style:
                ha-gauge $ svg.gauge: |
                  .dial {
                    stroke: var(--ha-card-background) !important;
                    stroke-width: 5 !important;
                  }
                  .value {
                    stroke-width: 5 !important;
                  }
                .: | 
                  ha-card {
                    background-color: transparent;
                    padding: 0 var(--ha-card-padding) var(--ha-card-padding) !important;
                  }
          - type: custom:apexcharts-card
            card_mod:
              style: |
                ha-card {
                  padding: var(--ha-card-padding) !important;
                  background-color: transparent;
                }
                #spinner-wrapper {
                  display: none !important;
                }
                #header {
                  padding: 0 16px !important;
                }
                #header__title {
                  font-size: 1em !important;
                  font-weight: regular !important;
                  color: var(--primary-text-color) !important;
                }
            chart_type: radialBar
            apex_config:
              legend:
                show: false
              chart:
                height: 250px
              plotOptions:
                radialBar:
                  inverseOrder: true
                  hollow:
                    #size: 40%
                    image: '/local/ui/google-icon-electric-bolt-128px.png'
                    imageClipped: false
                    imageWidth: 50
                    imageHeight: 50
            header:
              show: true
              title: 'Current hour consumption vs. this month max-hour average'
              show_states: true
              colorize_states: true
            series:
              - entity: sensor.accumulated_consumption_current_hour_asengata_6a
                name: Current hour
                show:
                  in_header: false
                color: '#1aff66'
                data_generator: |
                  const sensorValueKWh = parseFloat(entity.state);
                  const percentageOfTotal = (sensorValueKWh / 5) * 100;
                  return [[new Date().getTime(), percentageOfTotal]];
              - entity: sensor.accumulated_consumption_current_hour_asengata_6a
                name: Current hour
                show:
                  in_chart: false
                unit: ' kWh'
                color: '#1aff66'
                float_precision: 2
              - entity: sensor.power_monthly_maxhour_average
                name: Average
                show:
                  in_header: false
                unit: ' %'
                color: '#d24dff'
                data_generator: |
                  const sensor_percent = parseFloat(entity.attributes.prcnt_of_limit);
                  return [[new Date().getTime(), sensor_percent]];
              - entity: sensor.power_monthly_maxhour_average
                name: Average
                show:
                  in_chart: false
                unit: ' kWh'
                color: '#d24dff'
                float_precision: 2
              - entity: sensor.elvia_active_fixed_price_level
                name: Price level limit
                show:
                  in_chart: false
                unit: ' kWh'
                color: red
                data_generator: |
                  const sensorValueKWh = parseFloat(entity.attributes.level_max);
                  return [[new Date().getTime(), sensorValueKWh]];