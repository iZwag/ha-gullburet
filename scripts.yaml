all_lights_off:
  alias: 'All lights: Off'
  mode: single
  icon: mdi:lightbulb-group-outline
  sequence:
  - service: scene.turn_on
    target:
      entity_id: scene.kitchen_lights_off
    metadata: {}
  - delay: 00:00:01
  - service: scene.turn_on
    target:
      entity_id: scene.living_room_lights_off
    metadata: {}
  - delay: 00:00:01
  - service: scene.turn_on
    target:
      entity_id: scene.entry_lights_off
    metadata: {}
  - delay: 00:00:01
  - service: scene.turn_on
    target:
      entity_id: scene.bathroom_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.toilet_lights_off
    metadata: {}
  - delay: 00:00:01
  - service: scene.turn_on
    target:
      entity_id: scene.guestroom_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.office_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.bedroom_lights_off
    metadata: {}
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.veranda_lights_off
all_lights_on:
  alias: 'All lights: On'
  mode: restart
  icon: mdi:lightbulb-group
  sequence:
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlights_entry
  - delay: 00:00:01
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.lamp_globe_living
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlights_living
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.spottrack4_living
  - service: switch.turn_on
    data: {}
    target:
      entity_id: switch.lamp_mushroom_living
  - service: light.turn_on
    data:
      color_temp: 400
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.mood_ball
  - delay: 00:00:01
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.pendants_living
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.pendants_kitchen
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.spottrack6_kitchen
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlights_bath
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlight_toilet
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.wall_lantern_veranda
calculate_risenoon:
  alias: Sun-cycle - Calculates RiseNoon-time
  mode: single
  icon: mdi:sun-angle
  sequence:
  - service: python_script.calculate_middle_time
    data:
      time1: '{{ states(''sensor.sun_next_rising'') }}'
      time2: '{{ states(''sensor.sun_next_noon'') }}'
      entity_id: input_datetime.risenoon
calculate_noonset:
  alias: Sun-cycle - Calculates NoonSet-time
  mode: single
  icon: mdi:sun-angle-outline
  sequence:
  - service: python_script.calculate_middle_time
    data:
      time1: '{{ states(''sensor.sun_next_noon'') }}'
      time2: '{{ states(''sensor.sun_next_setting'') }}'
      entity_id: input_datetime.noonset
bedtime_lights:
  alias: Bedtime-mode (Lights off)
  sequence:
  - service: scene.turn_on
    target:
      entity_id: scene.toilet_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.bathroom_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.office_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.entry_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.living_room_lights_off
    metadata: {}
  - service: scene.turn_on
    target:
      entity_id: scene.kitchen_lights_off
    metadata: {}
  mode: single
  icon: mdi:bed
select_floorplan_room:
  alias: Floorplan - Select room
  sequence:
  - service: input_text.set_value
    metadata: {}
    data:
      value: '{{ room_name }}'
    target:
      entity_id: input_text.floorplan_select_state
  mode: restart
  icon: mdi:gesture-tap-button
  fields:
    room_name:
      selector:
        text:
          multiple: false
      required: true
      name: Room name
      description: The name-ID of the room as text
deselect_floorplan_room:
  alias: Floorplan - Unselect room
  sequence:
  - service: input_text.set_value
    metadata: {}
    data:
      value: none
    target:
      entity_id: input_text.floorplan_select_state
  mode: single
  icon: mdi:select-remove
storage_room_light_on_auto:
  alias: Storage room - Light on - Auto
  sequence:
  - service: timer.start
    metadata: {}
    data:
      duration: 00:03:00
    target:
      entity_id: timer.storage_room_light_timer
  - type: turn_on
    device_id: 0f0cf256bc675de29f236888b06ff677
    entity_id: fad54750e7aefa1a6178fdf5e8714bcc
    domain: light
  mode: single
  icon: mdi:lightbulb-auto
storage_room_light_on_manual:
  alias: Storage room - Light on - Manual
  sequence:
  - service: timer.start
    metadata: {}
    data:
      duration: 00:10:00
    target:
      entity_id: timer.storage_room_light_timer
  - type: turn_on
    device_id: 0f0cf256bc675de29f236888b06ff677
    entity_id: fad54750e7aefa1a6178fdf5e8714bcc
    domain: light
  mode: single
  icon: mdi:lightbulb
masterdim_script:
  alias: Masterdim script
  mode: single
  icon: mdi:brightness-7
  fields:
    light_entity:
      selector:
        entity: {}
      required: true
    brightness:
      selector:
        number:
          min: 1
          max: 100
      required: true
  sequence:
  - if:
    - condition: state
      entity_id: '{{ light_entity }}'
      state: 'on'
    then:
    - service: light.turn_on
      metadata: {}
      data:
        brightness_pct: 69
      target:
        entity_id: '{{ light_entity }}'
robot_clean_target_room:
  alias: Robot clean - Target room
  sequence:
  - service: vacuum.set_fan_speed
    metadata: {}
    data:
      fan_speed: '{{ fan_speed }}'
    target:
      entity_id: vacuum.esmeralda
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - service: xiaomi_miio.vacuum_clean_segment
    target:
      entity_id: vacuum.esmeralda
    data:
      segments: '{{ room_number_id }}'
  mode: single
  icon: mdi:robot-vacuum
  fields:
    room_number_id:
      selector:
        number:
          min: 16
          max: 21
          step: 1
      name: Room number-ID
      description: 16 = entry, 17 = kitchen, 18 = living room, 19 = guest room, 20
        = bedroom, 21 = office
      default: 16
      required: true
    fan_speed:
      selector:
        text:
      name: Fan-speed
      description: Choose between "SIlent", "Standard", "Medium" and "Turbo"
      default: balanced
speakers_join_all:
  alias: Speakers - Join all common-rooms
  sequence:
  - service: media_player.join
    data:
      group_members:
      - media_player.sonos_move
      - media_player.kjokken
    target:
      entity_id: media_player.stue
  mode: restart
  icon: mdi:speaker-multiple
speakers_unjoin_all:
  alias: Speakers - Unjoin all common-rooms
  sequence:
  - service: media_player.unjoin
    target:
      entity_id:
      - media_player.stue
      - media_player.kjokken
      - media_player.sonos_move
    data: {}
  mode: restart
  icon: mdi:speaker
sun_cycle_set_next_event_text:
  alias: Sun-cycle - Set next event text
  sequence:
  - service: input_text.set_value
    target:
      entity_id: input_text.sun_cycle_next_event
    data:
      value: "{% set ns = namespace(formatted_time='') %}    {% if event_time is string
        and event_time | length > 8 %}  \n  {% set dt = as_datetime(event_time) %}
        \  \n  {% set local_dt = dt.astimezone(now().tzinfo) %}\n  {% set ns.formatted_time
        = local_dt.strftime('%H:%M') %}\n{% elif event_time is string %} \n  {% set
        ns.formatted_time = event_time.split(':')[0] ~ ':' ~ event_time.split(':')[1]
        %}\n{% endif %}    {{ next_sun_event }} at {{ ns.formatted_time }}\n"
  mode: single
  fields:
    next_sun_event:
      selector:
        text:
      name: Next sun event
      description: A text name for the event, such as Midnight, Dawn, Sunrise, Risenoon,
        Noon, Noonset, Sunset and Dusk.
      required: true
    event_time:
      selector:
        text: {}
      name: Event time
      description: The time of the next event. Must support hours and minutes
  icon: mdi:sun-wireless
storage_room_light_off_finish_timer:
  alias: Storage room - Light off - Finish timer
  sequence:
  - service: timer.finish
    target:
      entity_id: timer.storage_room_light_timer
    data: {}
  mode: single
  icon: mdi:lightbulb-off
robot_set_mop_mode:
  alias: Robot clean - Set mop mode
  sequence:
  - service: vacuum.send_command
    metadata: {}
    data:
      command: set_water_box_custom_mode
      params: "{% if mopping_mode == 'Off' %}\n  [200]\n{% elif mopping_mode == 'Low'
        %}\n  [201]\n{% elif mopping_mode == 'Medium' %}\n  [202]\n{% elif mopping_mode
        == 'High' %}\n  [203]\n{% else %}\n  [202]\n{% endif %}\n"
    target:
      entity_id: vacuum.esmeralda
    alias: Send command Mop mode
  - condition: template
    value_template: '{{ mopping_route is not none and mopping_route | trim != ''''
      }}'
    alias: Check if Mop route has been given (only mop)
  - service: vacuum.send_command
    metadata: {}
    data:
      command: set_custom_mode
      params: 105
    target:
      entity_id: vacuum.esmeralda
    alias: Send command Fan-mode OFF
  - service: vacuum.send_command
    metadata: {}
    data:
      command: set_mop_mode
      params: "{% if mopping_route == 'Standard' %}\n  [300]\n{% elif mopping_route
        == 'Deep' %}\n  [301]\n{% elif mopping_route == 'DeepPlus' %}\n  [303]\n{%
        else %}\n  [300]\n{% endif %}\n"
    target:
      entity_id: vacuum.esmeralda
    alias: Send command Mop route
  mode: restart
  icon: mdi:spray-bottle
  fields:
    mopping_mode:
      selector:
        text:
      name: Mopping mode
      description: 'The scrubbing intensity of mopping. Values: Off, Low, Medium,
        High.'
      default: Medium
      required: true
    mopping_route:
      selector:
        text:
      name: Mopping route
      description: 'The deeper the route, the slower and more thorough it cleans.
        Values: Standard, Deep, DeepPlus. '
