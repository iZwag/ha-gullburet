all_lights_off:
  alias: 'Lights - All lights: Off'
  mode: single
  icon: mdi:lightbulb-group-outline
  sequence:
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.kitchen_lights_off
  - delay: 00:00:01
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.living_room_lights_off
  - delay: 00:00:01
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.entry_lights_off
  - delay: 00:00:01
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.bathroom_lights_off
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.toilet_lights_off
  - delay: 00:00:01
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.guestroom_lights_off
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.office_lights_off
  - service: scene.turn_on
    data: {}
    target:
      entity_id: scene.bedroom_lights_off
  - service: scene.turn_on
    target:
      entity_id: scene.veranda_lights_off
    data: {}
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id:
      - input_boolean.lights_cooking_mode
      - input_boolean.lights_movie_mode
      - input_boolean.lights_dining_mode
      - input_boolean.party_mode_enable
  - service: input_select.select_option
    metadata: {}
    data:
      option: 'off'
    target:
      entity_id: input_select.office_mode_select
  - service: input_select.select_option
    metadata: {}
    data:
      option: 'off'
    target:
      entity_id: input_select.bathroom_mode_select
all_lights_on:
  alias: 'Lights - All lights: On'
  mode: restart
  icon: mdi:lightbulb-group
  sequence:
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlights_entry
  - delay: 00:00:01
  - service: switch.turn_on
    target:
      entity_id: switch.lamp_globe_living
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlights_living
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.spottrack4_living
  - service: switch.turn_on
    target:
      entity_id: switch.lamp_mushroom_living
  - service: light.turn_on
    data:
      color_temp: 400
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.mood_lamp_living
  - delay: 00:00:01
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.pendants_living
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.pendants_kitchen
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.spottrack6_kitchen
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlights_bath
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.downlight_toilet
  - service: light.turn_on
    data:
      brightness_pct: '{{ states(''input_number.apartment_dimmer'') | int }}'
    target:
      entity_id: light.wall_lantern_veranda
calculate_risenoon:
  alias: Sun-cycle - Calculates RiseNoon-time
  mode: single
  icon: mdi:sun-angle
  sequence:
  - service: python_script.calculate_middle_time
    data:
      time1: '{{ states(''sensor.sun_next_rising'') }}'
      time2: '{{ states(''sensor.sun_next_noon'') }}'
      entity_id: input_datetime.risenoon
calculate_noonset:
  alias: Sun-cycle - Calculates NoonSet-time
  mode: single
  icon: mdi:sun-angle-outline
  sequence:
  - service: python_script.calculate_middle_time
    data:
      time1: '{{ states(''sensor.sun_next_noon'') }}'
      time2: '{{ states(''sensor.sun_next_setting'') }}'
      entity_id: input_datetime.noonset
bedtime_lights:
  alias: Lights - Bedtime-mode (Lights off)
  sequence:
  - service: scene.turn_on
    target:
      entity_id: scene.toilet_lights_off
  - service: scene.turn_on
    target:
      entity_id: scene.bathroom_lights_off
  - service: scene.turn_on
    target:
      entity_id: scene.office_lights_off
  - service: scene.turn_on
    target:
      entity_id: scene.entry_lights_off
  - service: scene.turn_on
    target:
      entity_id: scene.living_room_lights_off
  - service: scene.turn_on
    target:
      entity_id: scene.kitchen_lights_off
  mode: single
  icon: mdi:bed
select_floorplan_room:
  alias: Floorplan - Select room
  sequence:
  - service: input_select.select_option
    metadata: {}
    data:
      option: '{{ room_name }}'
    target:
      entity_id: input_select.floorplan_select_state
  mode: restart
  icon: mdi:gesture-tap-button
  fields:
    room_name:
      selector:
        text:
          multiple: false
      required: true
      name: Room name
      description: The name-ID of the room as text
deselect_floorplan_room:
  alias: Floorplan - Unselect room
  sequence:
  - service: input_select.select_option
    metadata: {}
    data:
      option: none
    target:
      entity_id: input_select.floorplan_select_state
  mode: single
  icon: mdi:select-remove
storage_room_light_on_auto:
  alias: Storage room - Light on - Auto
  sequence:
  - service: timer.start
    data:
      duration: 00:03:00
    target:
      entity_id: timer.storage_room_light_timer
  - type: turn_on
    device_id: 91c9c36e238ec41947f52b0f55c97036
    entity_id: 4ad13a64085d45c3fca12e71fa3ba5c1
    domain: light
    brightness_pct: 100
  mode: single
  icon: mdi:lightbulb-auto
masterdim_script:
  alias: Lights - Masterdim light
  mode: queued
  icon: mdi:brightness-7
  fields:
    light_entity:
      selector:
        entity: {}
      required: true
    brightness:
      selector:
        number:
          min: 1
          max: 100
      required: true
    manual_override:
      selector:
        boolean: {}
      name: Manual override
      default: true
      required: true
      description: Default is false. Is true when a scene or other manual setting
        has been configured
  sequence:
  - if:
    - condition: and
      conditions:
      - condition: template
        value_template: '{{ manual_override == false }}'
        alias: If Manual override is false
      - condition: template
        value_template: '{{ is_state(light_entity, ''on'' )}}'
        alias: If light entity is on
    then:
    - service: light.turn_on
      data:
        brightness_pct: '{{ brightness }}'
      target:
        entity_id: '{{ light_entity }}'
  max: 25
robot_clean_target_room:
  alias: Robot clean - Target room
  sequence:
  - service: vacuum.set_fan_speed
    data:
      fan_speed: '{{ fan_speed }}'
    target:
      entity_id: vacuum.esmeralda
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - service: xiaomi_miio.vacuum_clean_segment
    target:
      entity_id: vacuum.esmeralda
    data:
      segments: '{{ room_number_id }}'
  mode: single
  icon: mdi:robot-vacuum
  fields:
    room_number_id:
      selector:
        number:
          min: 16
          max: 21
          step: 1
      name: Room number-ID
      description: 16 = entry, 17 = kitchen, 18 = living room, 19 = guest room, 20
        = bedroom, 21 = office
      default: 16
      required: true
    fan_speed:
      selector:
        text:
      name: Fan-speed
      description: Choose between "SIlent", "Standard", "Medium" and "Turbo"
      default: balanced
speakers_join_all:
  alias: Speakers - Group Fellesrom
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ selected_speaker == ''Living room'' }}'
      sequence:
      - service: media_player.join
        target:
          entity_id: media_player.sonos_living
        data:
          group_members:
          - media_player.sonos_move
          - media_player.sonos_kitchen
    - conditions:
      - condition: template
        value_template: '{{ selected_speaker == ''Kitchen'' }}'
      sequence:
      - service: media_player.join
        data:
          group_members:
          - media_player.sonos_move
          - media_player.sonos_living
        target:
          entity_id: media_player.sonos_kitchen
    - conditions:
      - condition: template
        value_template: '{{ selected_speaker == ''Sonos Move'' }}'
      sequence:
      - service: media_player.join
        data:
          group_members:
          - media_player.sonos_living
          - media_player.sonos_kitchen
        target:
          entity_id: media_player.sonos_move
    default:
    - service: media_player.join
      target:
        entity_id: media_player.sonos_living
      data:
        group_members:
        - media_player.sonos_move
        - media_player.sonos_kitchen
  - service: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.sonos_living
      - media_player.sonos_kitchen
      - media_player.sonos_move
  mode: restart
  icon: mdi:speaker-multiple
  fields:
    selected_speaker:
      selector:
        select:
          options:
          - Living room
          - Kitchen
          - Sonos Move
      name: Selected speaker
      description: The currently selected speaker from the state of its input_select-helper.
      default: Living room
speakers_unjoin_all:
  alias: Speakers - Ungroup
  sequence:
  - service: media_player.unjoin
    data: {}
    target:
      entity_id:
      - media_player.sonos_living
      - media_player.sonos_kitchen
      - media_player.sonos_move
  mode: restart
  icon: mdi:speaker
sun_cycle_set_next_event_text:
  alias: Sun-cycle - Set next event text
  sequence:
  - service: input_text.set_value
    target:
      entity_id: input_text.sun_cycle_next_event
    data:
      value: "{% set ns = namespace(formatted_time='') %}    {% if event_time is string
        and event_time | length > 8 %}  \n  {% set dt = as_datetime(event_time) %}
        \  \n  {% set local_dt = dt.astimezone(now().tzinfo) %}\n  {% set ns.formatted_time
        = local_dt.strftime('%H:%M') %}\n{% elif event_time is string %} \n  {% set
        ns.formatted_time = event_time.split(':')[0] ~ ':' ~ event_time.split(':')[1]
        %}\n{% endif %}    {{ next_sun_event }} at {{ ns.formatted_time }}\n"
  mode: single
  fields:
    next_sun_event:
      selector:
        text:
      name: Next sun event
      description: A text name for the event, such as Midnight, Dawn, Sunrise, Risenoon,
        Noon, Noonset, Sunset and Dusk.
      required: true
    event_time:
      selector:
        text: {}
      name: Event time
      description: The time of the next event. Must support hours and minutes
  icon: mdi:sun-wireless
storage_room_light_off_finish_timer:
  alias: Storage room - Light off - Finish timer
  sequence:
  - service: timer.finish
    target:
      entity_id: timer.storage_room_light_timer
    data: {}
  - type: turn_off
    device_id: 91c9c36e238ec41947f52b0f55c97036
    entity_id: 4ad13a64085d45c3fca12e71fa3ba5c1
    domain: light
  mode: single
  icon: mdi:lightbulb-off
robot_set_mop_mode:
  alias: Robot clean - Set mop mode
  sequence:
  - service: vacuum.send_command
    data:
      command: set_water_box_custom_mode
      params: "{% if mopping_mode == 'Off' %}\n  [200]\n{% elif mopping_mode == 'Low'
        %}\n  [201]\n{% elif mopping_mode == 'Medium' %}\n  [202]\n{% elif mopping_mode
        == 'High' %}\n  [203]\n{% else %}\n  [202]\n{% endif %}\n"
    target:
      entity_id: vacuum.esmeralda
    alias: Send command Mop mode
  - alias: If Map route has been given
    if:
    - condition: template
      value_template: '{{ mopping_route is not none and mopping_route | trim != ''''
        }}'
    then:
    - service: vacuum.send_command
      data:
        command: set_custom_mode
        params: 105
      target:
        entity_id: vacuum.esmeralda
      alias: Send command Fan-mode OFF
    - service: vacuum.send_command
      data:
        command: set_mop_mode
        params: "{% if mopping_route == 'Standard' %}\n  [300]\n{% elif mopping_route
          == 'Deep' %}\n  [301]\n{% elif mopping_route == 'DeepPlus' %}\n  [303]\n{%
          else %}\n  [300]\n{% endif %}\n"
      target:
        entity_id: vacuum.esmeralda
      alias: Send command Mop route
    else:
    - service: vacuum.set_fan_speed
      data:
        fan_speed: '{{ fan_speed }}'
      target:
        entity_id: vacuum.esmeralda
  mode: restart
  icon: mdi:robot-vacuum
  fields:
    mopping_mode:
      selector:
        text:
      name: Mopping mode
      description: 'The scrubbing intensity of mopping. Values: Off, Low, Medium,
        High.'
      default: Medium
      required: true
    mopping_route:
      selector:
        text:
      name: Mopping route
      description: 'The deeper the route, the slower and more thorough it cleans.
        Values: Standard, Deep, DeepPlus. '
    fan_speed:
      selector:
        text:
      name: Fan speed
      description: 'Sets the vacuum fan speed for vacuum & mop. Values: SIlent, Standard,
        Medium and Turbo'
      default: Standard
heating_set_thermostat_mode:
  alias: Heating - Set thermostat mode
  sequence:
  - service: input_select.select_option
    data:
      option: '{{ mode }}'
    target:
      entity_id: '{{ control_mode_entity }}'
  mode: queued
  icon: mdi:thermostat
  fields:
    mode:
      selector:
        select:
          multiple: false
          options:
          - Manual
          - Away
          - Sleep
          - Comfort
      name: Mode
      description: Select
      default: Away
      required: true
    control_mode_entity:
      selector:
        entity: {}
      name: Control mode entity
heating_mode_sets_temperature:
  alias: Heating - Set thermostat target temperature
  sequence:
  - service: climate.set_temperature
    data:
      hvac_mode: heat
      temperature: '{{ states( temperature_entity ) }}'
    target:
      entity_id: '{{ thermostat_entity }}'
  mode: queued
  icon: mdi:thermostat
  fields:
    thermostat_entity:
      selector:
        entity: {}
      name: Thermostat entity
      required: true
    temperature_entity:
      selector:
        entity: {}
      name: Temperature entity
      required: true
  max: 10
lights_reset_overrides:
  alias: Lights - Reset manual overrides
  sequence:
  - service: input_boolean.turn_off
    target:
      entity_id:
      - input_boolean.lights_override_bath
      - input_boolean.lights_override_entry
      - input_boolean.lights_override_kitchen
      - input_boolean.lights_override_living
      - input_boolean.lights_override_office
      - input_boolean.lights_override_veranda
  mode: single
  icon: mdi:restart
heating_set_mode_all_thermostats:
  alias: Heating - Set dynamic mode of all thermostats
  sequence:
  - service: input_select.select_option
    data:
      option: '{{ control_mode }}'
    target:
      entity_id:
      - input_select.heating_mode_bath
      - input_select.heating_mode_bedroom
      - input_select.heating_mode_guest
      - input_select.heating_mode_kitchen
      - input_select.heating_mode_living
      - input_select.heating_mode_toilet
      - input_select.heating_mode_office
  mode: single
  icon: mdi:thermostat
  fields:
    control_mode:
      selector:
        select:
          options:
          - Away
          - Vacation
          - Manual
      name: Control mode
      description: Mode that all thermostats will be set to. Only supports the ones
        they can all be set to.
heating_set_warmest_mode_all_thermostats:
  alias: Heating - Set warmest mode of all thermostats
  sequence:
  - service: input_select.select_option
    data:
      option: Comfort
    target:
      entity_id:
      - input_select.heating_mode_bath
      - input_select.heating_mode_kitchen
      - input_select.heating_mode_living
  - service: input_select.select_option
    data:
      option: Sleep
    target:
      entity_id:
      - input_select.heating_mode_bedroom
      - input_select.heating_mode_office
  - service: input_select.select_option
    data:
      option: Away
    target:
      entity_id:
      - input_select.heating_mode_guest
      - input_select.heating_mode_toilet
  mode: single
  icon: mdi:thermostat
set_fan_speed_roborock_wrapper:
  alias: Robot clean - Set fan speed Roborock wrapper
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ fan_speed == ''Quiet'' }}'
      sequence:
      - service: vacuum.set_fan_speed
        data:
          fan_speed: Silent
        target:
          entity_id: vacuum.esmeralda
      alias: If Quiet, set Silent
    - conditions:
      - condition: template
        value_template: '{{ fan_speed == ''Balanced'' }}'
      sequence:
      - service: vacuum.set_fan_speed
        data:
          fan_speed: Standard
        target:
          entity_id: vacuum.esmeralda
      alias: If Balanced, set Standard
    - conditions:
      - condition: template
        value_template: '{{ fan_speed == ''Turbo'' }}'
      sequence:
      - service: vacuum.set_fan_speed
        data:
          fan_speed: Medium
        target:
          entity_id: vacuum.esmeralda
      alias: If Turbo, set Medium
    - conditions:
      - condition: template
        value_template: '{{ fan_speed == ''Max'' }}'
      sequence:
      - service: vacuum.set_fan_speed
        data:
          fan_speed: Turbo
        target:
          entity_id: vacuum.esmeralda
      alias: If Max, set Turbo
  mode: queued
  icon: mdi:robot-vacuum
  fields:
    fan_speed:
      selector:
        select:
          options:
          - Quiet
          - Balanced
          - Turbo
          - Max
      name: Fan speed
      description: Accepts the inputs in the terminology of the Roborock-app.
lights_kitchen_cooking_mood:
  alias: Lights - Kitchen Cooking mood
  sequence:
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.lights_kitchen_cooking
  mode: single
  icon: mdi:pot-steam
lights_dinner_mood:
  alias: Lights - Dinner mood
  sequence:
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.lights_kitchen_dinner_mood
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.lights_dinner_mood
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.hue_control_room_solnedgang_pa_savannen
  mode: single
  icon: mdi:silverware-variant
lights_tv_mood:
  alias: Lights - TV Mood
  sequence:
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.lights_entry_tv_mood
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.lights_kitchen_tv_mood
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.lights_living_tv_mood
  - service: scene.turn_on
    metadata: {}
    target:
      entity_id: scene.hue_control_room_soho
  mode: single
  icon: mdi:video-vintage
bedroom_heated_sheet_control:
  alias: Bedroom - Heated sheet control
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == "on" }}'
      sequence:
      - service: switch.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_seasonal_heat
      - service: timer.start
        data:
          duration: '{{ increase }}'
        target:
          entity_id: timer.heated_sheet_timer
      alias: 'ON'
    - conditions:
      - condition: template
        value_template: '{{ command == "off" }}'
      sequence:
      - service: switch.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: switch.plug_seasonal_heat
      - service: timer.finish
        metadata: {}
        data: {}
        target:
          entity_id: timer.heated_sheet_timer
      alias: 'OFF'
    - conditions:
      - condition: template
        value_template: '{{ command == "up" }}'
      sequence:
      - if:
        - condition: or
          conditions:
          - condition: state
            entity_id: timer.heated_sheet_timer
            state: idle
          - condition: state
            entity_id: timer.heated_sheet_timer
            state: paused
        then:
        - service: timer.start
          data:
            duration: '{{ increase }}'
          target:
            entity_id: timer.heated_sheet_timer
        else:
        - if:
          - condition: template
            value_template: '{% set remaining = state_attr(''timer.heated_sheet_timer'',
              ''remaining'').split('':'') %}

              {% set duration = state_attr(''timer.heated_sheet_timer'', ''duration'').split('':'')
              %}

              {% set add_time = increase.split('':'') %}


              {% set remaining_td = timedelta(hours=remaining[0]|int, minutes=remaining[1]|int,
              seconds=remaining[2]|int) %}

              {% set duration_td = timedelta(hours=duration[0]|int, minutes=duration[1]|int,
              seconds=duration[2]|int) %}

              {% set increase_td = timedelta(hours=add_time[0]|int, minutes=add_time[1]|int,
              seconds=add_time[2]|int) %}


              {{ (remaining_td + increase_td) > duration_td }}'
          then:
          - service: timer.start
            target:
              entity_id: timer.heated_sheet_timer
            data:
              duration: '{% set duration = state_attr(''timer.heated_sheet_timer'',
                ''duration'').split('':'') %} {% set duration_sec = (duration[0]|int)
                * 3600 + (duration[1]|int) * 60 + (duration[2]|int) %}

                {% set add = increase.split('':'') %} {% set add_sec = (add[0]|int)
                * 3600 + (add[1]|int) * 60 + (add[2]|int) %}

                {% set total = duration_sec + add_sec %}

                {% set hours = (total // 3600) %} {% set minutes = ((total % 3600)
                // 60) %} {% set seconds = total % 60 %}

                {{ ''{:02}:{:02}:{:02}''.format(hours, minutes, seconds) }}

                '
          else:
          - service: timer.change
            data:
              duration: '{{ increase }}'
            target:
              entity_id: timer.heated_sheet_timer
      alias: UP
    - conditions:
      - condition: template
        value_template: '{{ command == "down" }}'
      sequence:
      - if:
        - condition: template
          value_template: "{% if is_state('timer.heated_sheet_timer', 'idle') %}\n
            \ {{ false }}\n{% else %}\n  {% set remaining = state_attr('timer.heated_sheet_timer',
            'remaining').split(':') %}\n  {% set remaining_seconds = (remaining[0]|int)
            * 3600 + (remaining[1]|int) * 60 + (remaining[2]|int) %}\n  {% set target_seconds
            = 10 * 60 + 1 %}\n  {{ remaining_seconds > target_seconds }}\n{% endif
            %}"
        then:
        - service: timer.change
          metadata: {}
          data:
            duration: -00:10:00
          target:
            entity_id: timer.heated_sheet_timer
        else:
        - service: timer.finish
          metadata: {}
          data: {}
          target:
            entity_id: timer.heated_sheet_timer
      alias: DOWN
    - conditions:
      - condition: template
        value_template: '{{ command == "toggle" }}'
      sequence:
      - alias: IF ON
        if:
        - condition: state
          entity_id: switch.plug_seasonal_heat
          state: 'on'
        then:
        - service: switch.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: switch.plug_seasonal_heat
        - service: timer.finish
          metadata: {}
          data: {}
          target:
            entity_id: timer.heated_sheet_timer
      - alias: IF OFF
        if:
        - condition: state
          entity_id: switch.plug_seasonal_heat
          state: 'off'
        then:
        - service: switch.turn_on
          metadata: {}
          data: {}
          target:
            entity_id: switch.plug_seasonal_heat
        - service: timer.start
          data:
            duration: 00:30:00
      alias: TOGGLE
  mode: queued
  icon: mdi:heating-coil
  fields:
    command:
      selector:
        select:
          options:
          - 'on'
          - 'off'
          - up
          - down
          - toggle
      name: Command
      description: Controls the behavior of the script. Turn sheet ON, OFF, increase
        duration (UP), decrease duration (DOWN)
      required: true
    increase:
      selector:
        time: {}
      name: increase
      default: 00:30:00
    decrease:
      selector:
        time: {}
      name: decrease
      default: 00:10:00
bathroom_control_light_mode:
  alias: Bathroom - Control light mode
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ setting == ''off'' }}'
      sequence:
      - service: scene.turn_on
        metadata: {}
        target:
          entity_id: scene.bathroom_lights_off
      - service: input_boolean.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.lights_override_bath
      alias: 'off'
    - conditions:
      - condition: template
        value_template: '{{ setting == ''bright'' }}'
      sequence:
      - service: scene.turn_on
        metadata: {}
        target:
          entity_id: scene.bathroom_bright_mode
      - service: input_boolean.turn_on
        target:
          entity_id:
          - input_boolean.lights_override_bath
        data: {}
      alias: bright
    - conditions:
      - condition: template
        value_template: '{{ setting == ''spa'' }}'
      sequence:
      - service: scene.turn_on
        metadata: {}
        target:
          entity_id: scene.bathroom_spa_mode
      - service: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.lights_override_bath
      alias: spa
    - conditions:
      - condition: template
        value_template: '{{ setting == ''night'' }}'
      sequence:
      - service: scene.turn_on
        metadata: {}
        target:
          entity_id: scene.bathroom_night_mode
      - service: input_boolean.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: input_boolean.lights_override_bath
      alias: night
  mode: restart
  icon: mdi:lightbulb-multiple
  fields:
    setting:
      selector:
        select:
          options:
          - 'off'
          - focus
          - gaming
          - rainbow
          - weather
      name: Setting
      default: 'off'
speakers_group_living_kitchen:
  alias: Speakers - Group Living/Kitchen
  sequence:
  - service: media_player.join
    target:
      entity_id: media_player.sonos_living
    data:
      group_members:
      - media_player.sonos_kitchen
  - service: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.1
    target:
      entity_id:
      - media_player.sonos_living
      - media_player.sonos_kitchen
  mode: restart
  icon: mdi:speaker-multiple
clean_selected_rooms:
  alias: Clean selected rooms
  sequence:
  - service: xiaomi_miio.vacuum_clean_segment
    metadata: {}
    data:
      segments: '{{ states(''input_text.selected_room_ids_cleaning'') }}'
    target:
      entity_id: vacuum.esmeralda
  - service: input_boolean.turn_off
    metadata: {}
    data: {}
    target:
      entity_id: input_boolean.select_rooms_cleaning
  mode: single
  icon: mdi:vacuum
system_restart_home_assistant:
  alias: System - Restart Home Assistant
  sequence:
  - service: homeassistant.restart
    metadata: {}
    data: {}
  mode: single
  icon: mdi:restart
system_restart_zigbee2mqtt:
  alias: System - Restart Zigbee2MQTT
  sequence:
  - service: shell_command.restart_zigbee2mqtt
    metadata: {}
    data: {}
  mode: single
  icon: mdi:restart
system_restart_rpi:
  alias: System - Restart RPi
  sequence:
  - service: shell_command.restart_rpi_server
    metadata: {}
    data: {}
  mode: single
  icon: mdi:restart
