# #############################################################################
# SETTING UP TEMPLATES IN A NEW ENVIRONMENT OR BACKING UP FROM OLD:
# Some of the unique_ids might not work immediately as entity_ids.
# In those cases they are typically found with their NAMES formatted
#  with underscores. In the HA UI, go to Settings > Devices & services
#  > Entities, and search up the entity, and rename it to its unique_id
#  in there. Then icon can also be configured, as desired.
# #############################################################################
- sensor:
    # =========================================================================
    # Floor Plan brightness levels. Linked to opacity-levels for PNG layers
    # Entity IDs were manually edited in Home Assistant: 
    # Settings > Devices and services > Entities > Change each entity_id
    - name: "Bedroom pendant brightness level"
      unique_id: pendant_bedroom_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.pendant_bedroom', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Office pendants brightness level"
      unique_id: pendants_office_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.pendants_office', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Guest pendant brightness level"
      unique_id: pendant_guest_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.pendant_guest', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Entry downlights brightness level"
      unique_id: downlights_entry_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.downlights_entry', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Toilet downlight brightness level"
      unique_id: downlight_toilet_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.downlight_toilet', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Bathroom downlights brightness level"
      unique_id: downlights_bath_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.downlights_bath', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Bathroom lightstrip brightness level"
      unique_id: lightstrip_bath_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.lightstrip_bath', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Living room spottrack brightness level"
      unique_id: spottrack_living_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.spottrack4_living', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Living room downlights brightness level"
      unique_id: downlights_living_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.downlights_living', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Dining pendants brightness level"
      unique_id: pendants_dining_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.pendants_living', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Kitchen pendants brightness level"
      unique_id: pendants_kitchen_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.pendants_kitchen', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Kitchen spottrack brightness level"
      unique_id: spottrack_kitchen_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.spottrack6_kitchen', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %} 
    - name: "Kitchen lightstrip brightness level"
      unique_id: lightstrip_undershelf_kitchen_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.lightstrip_undershelf_kitchen', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Storage room ceiling light brightness level"
      unique_id: ceiling_light_storage_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.ceiling_light_storage', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    - name: "Veranda wall lantern brightness level"
      unique_id: wall_lantern_veranda_dim
      unit_of_measurement: '%'
      state: >
        {% set brightness = state_attr('light.wall_light_veranda', 'brightness') %}
        {% set percent = (brightness / 255 * 100) | round(0) if brightness != None else 0 %}
        {% if percent <= 0 %}
          0
        {% elif percent <= 5 %}
          5
        {% elif percent <= 10 %}
          10
        {% elif percent <= 20 %}
          20
        {% elif percent <= 30 %}
          30
        {% elif percent <= 50 %}
          50
        {% elif percent <= 75 %}
          75
        {% else %}
          100
        {% endif %}
    
- binary_sensor:
  - name: "Esmeralda Mop Ready"
    unique_id: esmeralda_mop_ready
    state: >
      {{ is_state('binary_sensor.esmeralda_mop_attached', 'on') 
          and is_state('binary_sensor.esmeralda_water_box_attached', 'on') }}

- sensor:
  - name: "Lights On Count"
    unique_id: lights_on_count
    unit_of_measurement: ''
    state: >
      {{ [states('light.ceiling_light_storage'), 
          states('light.downlight_toilet'),
          states('light.downlights_bath'),
          states('light.downlights_entry'),
          states('light.downlights_living'),
          states('light.lightstrip_bath'),
          states('light.lightstrip_undershelf_kitchen'),
          states('light.mood_lamp_living'),
          states('light.pendant_bedroom'),
          states('light.pendant_guest'),
          states('light.pendants_kitchen'),
          states('light.pendants_living'),
          states('light.pendants_office'),
          states('light.spottrack4_living'),
          states('light.spottrack6_kitchen'),
          states('light.wall_light_veranda'),
          states('switch.lamp_globe_living'),
          states('switch.lamp_mushroom_living')] | select('eq', 'on') | list | count }}

- sensor:
  - unique_id: elvia_fixed_price_level_1
    name: Elvia fixed month price level 1
    device_class: monetary
    unit_of_measurement: NOK
    state: >
      {{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['monthlyTotal'] }}
    attributes:
      value_min: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['valueMin'] }}"
      value_max: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['valueMax'] }}"
      value_unit: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['valueUnitOfMeasure'] }}"
      id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['id'] }}"
      next_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['nextIdUp'] }}"
      prev_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[0]['nextIdDown'] }}"

- sensor:
  - unique_id: elvia_fixed_price_level_2
    name: Elvia fixed month price level 2
    device_class: monetary
    unit_of_measurement: NOK
    state: >
      {{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['monthlyTotal'] }}
    attributes:
      value_min: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['valueMin'] }}"
      value_max: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['valueMax'] }}"
      value_unit: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['valueUnitOfMeasure'] }}"
      id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['id'] }}"
      next_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['nextIdUp'] }}"
      prev_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[1]['nextIdDown'] }}"

- sensor:
  - unique_id: elvia_fixed_price_level_3
    name: Elvia fixed month price level 3
    device_class: monetary
    unit_of_measurement: NOK
    state: >
      {{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['monthlyTotal'] }}
    attributes:
      value_min: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['valueMin'] }}"
      value_max: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['valueMax'] }}"
      value_unit: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['valueUnitOfMeasure'] }}"
      id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['id'] }}"
      next_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['nextIdUp'] }}"
      prev_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[2]['nextIdDown'] }}"

- sensor:
  - unique_id: elvia_fixed_price_level_4
    name: Elvia fixed month price level 4
    device_class: monetary
    unit_of_measurement: NOK
    state: >
      {{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['monthlyTotal'] }}
    attributes:
      value_min: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['valueMin'] }}"
      value_max: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['valueMax'] }}"
      value_unit: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['valueUnitOfMeasure'] }}"
      id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['id'] }}"
      next_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['nextIdUp'] }}"
      prev_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[3]['nextIdDown'] }}"

- sensor:
  - unique_id: elvia_fixed_price_level_5 
    name: Elvia fixed month price level 5
    device_class: monetary
    unit_of_measurement: NOK
    state: >
      {{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['monthlyTotal'] }}
    attributes:
      value_min: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['valueMin'] }}"
      value_max: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['valueMax'] }}"
      value_unit: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['valueUnitOfMeasure'] }}"
      id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['id'] }}"
      next_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['nextIdUp'] }}"
      prev_id: "{{ state_attr('sensor.elvia_fixed_prices', 'priceLevels')[4]['nextIdDown'] }}"

- sensor:
  - unique_id: elvia_active_fixed_price_level
    name: Elvia active fixed price level 
    device_class: monetary
    unit_of_measurement: NOK
    state: >
      {% set current_average = states('sensor.power_monthly_maxhour_average') | float(default=0) %}
      {% for i in range(1, 6) %}
        {% set sensor_id = 'sensor.elvia_fixed_price_level_' ~ i %}
        {% set value_min = state_attr(sensor_id, 'value_min') | float(default=0) %}
        {% set value_max = state_attr(sensor_id, 'value_max') | float(default=2) %}
          {% if value_min <= current_average < value_max %}
            {{ states(sensor_id) }}
            {% break %}
          {% endif %}
      {% endfor %}
    attributes:
      level_max: >
        {% set current_average = states('sensor.power_monthly_maxhour_average') | float(default=0) %}
        {% for i in range(1, 6) %}
          {% set sensor_id = 'sensor.elvia_fixed_price_level_' ~ i %}
          {% set value_min = state_attr(sensor_id, 'value_min') | float(default=0) %}
          {% set value_max = state_attr(sensor_id, 'value_max') | float(default=2) %}
            {% if value_min <= current_average < value_max %}
              {{ state_attr(sensor_id, 'value_max') | float | round(1) }}
              {% break %}
            {% endif %}
        {% endfor %}
      prev_max: >
        {% set current_average = states('sensor.power_monthly_maxhour_average') | float(default=0) %}
        {% for i in range(1, 6) %}
          {% set sensor_id = 'sensor.elvia_fixed_price_level_' ~ i %}
          {% set value_min = state_attr(sensor_id, 'value_min') | float(default=0) %}
          {% set value_max = state_attr(sensor_id, 'value_max') | float(default=2) %}
            {% if value_min <= current_average < value_max %}
              {{ state_attr(sensor_id, 'value_min') | float | round(1) }}
              {% break %}
            {% endif %}
        {% endfor %}

  - unique_id: power_monthly_maxhour_1
    name: Monthly top max-hour 1 power consumption 
    device_class: energy
    unit_of_measurement: kWh
    state: "{{ states('input_number.power_monthly_highest_max_hour_1') | round(2) }}"
    attributes:
      start_time: "{{ states('input_datetime.power_monthly_highest_max_hour_1') }}"
      prcnt_of_limit: >
        {% set maxhour = states('input_number.power_monthly_highest_max_hour_1') | float(default=0) %}
        {% set limit = state_attr('sensor.elvia_active_fixed_price_level', 'level_max') | float(default=2) %}
        {% if limit > 0 %}
          {{ ((maxhour / limit) * 100 ) | round(2) }}
        {% else %}
          {{ ((maxhour / 2) * 100 ) | round(2) }}
        {% endif %}

  - unique_id: power_monthly_maxhour_2
    name: Monthly top max-hour 2 power consumption 
    device_class: energy
    unit_of_measurement: kWh
    state: "{{ states('input_number.power_monthly_highest_max_hour_2') | round(2) }}"
    attributes:
      start_time: "{{ states('input_datetime.power_monthly_highest_max_hour_2') }}"
      prcnt_of_limit: >
        {% set maxhour = states('input_number.power_monthly_highest_max_hour_2') | float(default=0) %}
        {% set limit = state_attr('sensor.elvia_active_fixed_price_level', 'level_max') | float(default=2) %}
        {% if limit > 0 %}
          {{ ((maxhour / limit) * 100 ) | round(2) }}
        {% else %}
          {{ ((maxhour / 2) * 100 ) | round(2) }}
        {% endif %}

  - unique_id: power_monthly_maxhour_3
    name: Monthly top max-hour 3 power consumption 
    device_class: energy
    unit_of_measurement: kWh
    state: "{{ states('input_number.power_monthly_highest_max_hour_3') | round(2) }}"
    attributes:
      start_time: "{{ states('input_datetime.power_monthly_highest_max_hour_3') }}"
      prcnt_of_limit: >
        {% set maxhour = states('input_number.power_monthly_highest_max_hour_3') | float(default=0) %}
        {% set limit = state_attr('sensor.elvia_active_fixed_price_level', 'level_max') | float(default=2) %}
        {% if limit > 0 %}
          {{ ((maxhour / limit) * 100 ) | round(2) }}
        {% else %}
          {{ ((maxhour / 2) * 100 ) | round(2) }}
        {% endif %}
  
  # Holds the calculated average of this month's top 3 max-hour consumption
  # The attribute holds the percentage of the comparison of the average to the
  #  current fixed-price level
  - unique_id: power_monthly_maxhour_average
    name: Monthly top max-hour average power consumption 
    device_class: energy
    unit_of_measurement: kWh
    state: >
      {% set maxhour1 = states('input_number.power_monthly_highest_max_hour_1') | float(default=0) %}
      {% set maxhour2 = states('input_number.power_monthly_highest_max_hour_2') | float(default=0) %}
      {% set maxhour3 = states('input_number.power_monthly_highest_max_hour_3') | float(default=0) %}
      {{ ((maxhour1 + maxhour2 + maxhour3) / 3) | round(2) }}
    attributes:
      prcnt_of_limit: >
        {% set maxhour = states('sensor.power_monthly_maxhour_average') | float(default=0) %}
        {% set limit = state_attr('sensor.elvia_active_fixed_price_level', 'level_max') | float(default=2) %}
        {{ ((maxhour / limit) * 100 ) | round(2) }}
  
  - unique_id: power_price_chart_show_hours
    name: Power - Price chart show hours state
    state: >
      {% if now().hour < 13 %}
        24h
      {% else %}
        48h
      {% endif %}

# Entity to store _hourly_ weather forecast from Met-integration (Met.no)
- trigger:
  - platform: time_pattern
    minutes: /30
  action:
    service: weather.get_forecasts
    data:
      type: hourly
    target:
      entity_id: weather.yr_weather_home
    response_variable: forecast_data
  sensor:
    name: YR Weather forecast, hourly
    unique_id: yr_weather_forecast_hourly
    state: "{{ state_attr('weather.yr_weather_home', 'temperature') | float(default=0) }}"
    attributes:
      forecast: "{{ forecast_data['weather.yr_weather_home'].forecast }}"

# Entity to store _daily_ weather forecast from Met-integration (Met.no)
#  * Used to be included in the weather-entity provided by Met, but as of 
#    March 2024 it is no longer provided. 
- trigger:
  - platform: time_pattern
    minutes: /30
  action:
    service: weather.get_forecasts
    data:
      type: daily
    target:
      entity_id: weather.yr_weather_home
    response_variable: forecast_data
  sensor:
    name: YR Weather forecast, daily
    unique_id: yr_weather_forecast_daily
    state: "{{ state_attr('weather.yr_weather_home', 'temperature') | float(default=0) }}"
    attributes:
      forecast: "{{ forecast_data['weather.yr_weather_home'].forecast }}"

# Combines the current weather and its attributes, appending the forecast as attributes
- sensor:
  - name: Combined Weather and Forecast
    unique_id: combined_weather_info
    state: "{{ states('weather.yr_weather_home') }}"
    attributes:
      attribution: "{{ state_attr('weather.yr_weather_home', 'attribution') }}"
      cloud_coverage: "{{ state_attr('weather.yr_weather_home', 'cloud_coverage') }}"
      dew_point: "{{ state_attr('weather.yr_weather_home', 'dew_point') }}"
      humidity: "{{ state_attr('weather.yr_weather_home', 'humidity') }}"
      precipitation_unit: "{{ state_attr('weather.yr_weather_home', 'precipitation_unit') }}"
      pressure: "{{ state_attr('weather.yr_weather_home', 'pressure') }}"
      pressure_unit: "{{ state_attr('weather.yr_weather_home', 'pressure_unit') }}"
      temperature: "{{ state_attr('weather.yr_weather_home', 'temperature') }}"
      temperature_unit: "{{ state_attr('weather.yr_weather_home', 'temperature_unit') }}"
      visibility_unit: "{{ state_attr('weather.yr_weather_home', 'visibility_unit') }}"
      wind_bearing: "{{ state_attr('weather.yr_weather_home', 'wind_bearing') }}"
      wind_gust_speed: "{{ state_attr('weather.yr_weather_home', 'wind_gust_speed') }}"
      wind_speed: "{{ state_attr('weather.yr_weather_home', 'wind_speed') }}"
      wind_speed_unit: "{{ state_attr('weather.yr_weather_home', 'wind_speed_unit') }}"
      forecast: "{{ state_attr('sensor.yr_weather_forecast_daily', 'forecast') }}"

# Holds the current hour's accumulated energy consumption as percentage of the current
#  fixed price max-level. Does the same for the estimated hour total
#  consumption as attribute
- sensor:
  - name: Tibber energy - Percentages of active fixed level
    unique_id: tibber_percentage_of_maxlevel
    unit_of_measurement: '%'
    state: >
      {% set current_hour = states('sensor.tibber_energy_consumption_current_hour') | float(default=0) %}
      {% set limit = state_attr('sensor.elvia_active_fixed_price_level', 'level_max') | float(default=2) %}
      {{ ((current_hour / limit) * 100 ) | round(2) }}
    attributes:
      estimate: >
        {% set estimate = states('sensor.tibber_estimated_energy_consumption') | float(default=0) %}
        {% set limit = state_attr('sensor.elvia_active_fixed_price_level', 'level_max') | float(default=2) %}
        {{ ((estimate / limit) * 100 ) | round(2) }}

# Sets the next alarm time, taking two helper-datetimes and the current weekday
#  as inputs. Checks if today's alarm has passed or not and what day it is, to
#  determine the next alarm time.
- sensor:
  - name: Wakeup - Next alarm time
    unique_id: wakeup_next_alarm_time
    icon: mdi:alarm
    device_class: timestamp
    state: >
      {% set weekday_alarm = states('input_datetime.wakeup_alarm_weekdays') %}
      {% set weekend_alarm = states('input_datetime.wakeup_alarm_weekends') %}
      {# Set the correct alarm_time assuming it is today, adjust below #}
      {% set alarm_time = weekday_alarm if now().weekday() < 5 else weekend_alarm %}
      {% set alarm_dt = as_timestamp(strptime( (now().strftime('%Y-%m-%d') ~ ' ' ~ alarm_time), '%Y-%m-%d %H:%M:%S')) %}
      {# Checks if today's alarm time has passed or not #}
      {% if now().timestamp() > alarm_dt %}
        {# Check tomorrow day & select correct alarm #}
        {% if 3 < now().weekday() < 6 %}
          {% set alarm_time = weekend_alarm %}
        {% else %}
          {% set alarm_time = weekday_alarm %}
        {% endif %}
        {% set alarm_dt = as_timestamp(strptime( (now().strftime('%Y-%m-%d') ~ ' ' ~ alarm_time), '%Y-%m-%d %H:%M:%S')) + 86400 %}
      {% endif %}
      {{ alarm_dt | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
    attributes:
      time: >
        {{ as_timestamp(states('sensor.wakeup_next_alarm_time')) | timestamp_custom('%H:%M:%S', true) }}
    
  # Calculates the wakeup-light start time
  # Takes the sensor.next_alarm_time and a number-helper (minutes) as inputs
  - name: Wakeup - Light start time
    unique_id: wakeup_light_start_time
    icon: mdi:sun-clock
    device_class: timestamp
    state: >
      {% set adjustment = (states('input_number.wakeup_minutes_of_light') | int(default=10)) * 60 %}
      {% set adjusted_time = as_timestamp(states('sensor.wakeup_next_alarm_time')) - adjustment %}
      {{ adjusted_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
    attributes:
      time: >
        {{ as_timestamp(states('sensor.wakeup_light_start_time')) | timestamp_custom('%H:%M:%S', true) }}
      hour: >
        {{ (as_timestamp(strptime(state_attr('sensor.wakeup_light_start_time', 'time'), '%H:%M:%S')) | timestamp_custom('%H', true)) | int(default=0) }}
      minute:  >
        {{ (as_timestamp(strptime(state_attr('sensor.wakeup_light_start_time', 'time'), '%H:%M:%S')) | timestamp_custom('%M', true)) | int(default=0) }}
      second: 0
      timestamp: >
        {{ ((state_attr('sensor.wakeup_light_start_time', 'hour') | int(default=0)) * 3600) + ((state_attr('sensor.wakeup_light_start_time', 'minute') | int(default=0)) * 60) }}

  # Calculates the increase volume and light intensities time
  # Takes the sensor.next_alarm_time and a number-helper (minutes) as inputs
  - name: Wakeup - Increase time
    unique_id: wakeup_increase_time
    icon: mdi:volume-plus
    device_class: timestamp
    state: >
      {% set adjustment = (states('input_number.wakeup_increase_minutes') | int(default=15)) * 60 %}
      {% set adjusted_time = as_timestamp(states('sensor.wakeup_next_alarm_time')) + adjustment %}
      {{ adjusted_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
    attributes:
      time: >
        {{ as_timestamp(states('sensor.wakeup_increase_time')) | timestamp_custom('%H:%M:%S', true) }}
      hour: >
        {{ (as_timestamp(strptime(state_attr('sensor.wakeup_increase_time', 'time'), '%H:%M:%S')) | timestamp_custom('%H', true)) | int(default=0) }}
      minute:  >
        {{ (as_timestamp(strptime(state_attr('sensor.wakeup_increase_time', 'time'), '%H:%M:%S')) | timestamp_custom('%M', true)) | int(default=0) }}
      second: 0
      timestamp: >
        {{ ((state_attr('sensor.wakeup_increase_time', 'hour') | int(default=0)) * 3600) + ((state_attr('sensor.wakeup_increase_time', 'minute') | int(default=0)) * 60) }}

  # Calculates the wakeup "last call" time, at which light and sound is maxed
  # Takes the sensor.next_alarm_time and a number-helper (minutes) as inputs
  - name: Wakeup - Last call time
    unique_id: wakeup_last_call_time
    icon: mdi:bed-clock
    device_class: timestamp
    state: >
      {% set adjustment = (states('input_number.wakeup_last_call_minutes') | int(default=30)) * 60 %}
      {% set adjusted_time = as_timestamp(states('sensor.wakeup_next_alarm_time')) + adjustment %}
      {{ adjusted_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
    attributes:
      time: >
        {{ as_timestamp(states('sensor.wakeup_last_call_time')) | timestamp_custom('%H:%M:%S', true) }}
      hour: >
        {{ (as_timestamp(strptime(state_attr('sensor.wakeup_last_call_time', 'time'), '%H:%M:%S')) | timestamp_custom('%H', true)) | int(default=0) }}
      minute:  >
        {{ (as_timestamp(strptime(state_attr('sensor.wakeup_last_call_time', 'time'), '%H:%M:%S')) | timestamp_custom('%M', true)) | int(default=0) }}
      second: 0
      timestamp: >
        {{ ((state_attr('sensor.wakeup_last_call_time', 'hour') | int(default=0)) * 3600) + ((state_attr('sensor.wakeup_last_call_time', 'minute') | int(default=0)) * 60) }}

  # Sets the next bedtime-time, taking two helper-datetimes and the current
  #  weekday as inputs. Checks if today's bedtime has passed or not and what
  #  day it is, to determine the next bedtime.
  - name: Bedtime - Next trigger time
    unique_id: bedtime_next_trigger_time
    icon: mdi:alarm
    device_class: timestamp
    state: >
      {% set weekday_trigger = states('input_datetime.bedtime_trigger_weekdays') %}
      {% set weekend_trigger = states('input_datetime.bedtime_trigger_weekends') %}
      {# Set the correct trigger_time assuming it is today, adjust below #}
      {% set trigger_time = weekend_trigger if (3 < now().weekday() < 6) else weekday_trigger %}
      {% set trigger_dt = as_timestamp(strptime( (now().strftime('%Y-%m-%d') ~ ' ' ~ trigger_time), '%Y-%m-%d %H:%M:%S')) %}
      {# Checks if today's bedtime trigger has passed or not #}
      {% if now().timestamp() > trigger_dt %}
        {# Check what day tomorrow is & select correct trigger #}
        {% if 2 < now().weekday() < 5 %}
          {% set trigger_time = weekend_trigger %}
        {% else %}
          {% set trigger_time = weekday_trigger %}
        {% endif %}
        {% set trigger_dt = as_timestamp(strptime( (now().strftime('%Y-%m-%d') ~ ' ' ~ trigger_time), '%Y-%m-%d %H:%M:%S')) + 86400 %}
      {% endif %}
      {{ trigger_dt | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
    attributes:
      time: >
        {{ as_timestamp(states('sensor.bedtime_next_trigger_time')) | timestamp_custom('%H:%M:%S', true) }}

  # Calculates the bedtime heated-sheet turn on time
  # Takes the sensor.bedtime_next_trigger_time and a number-helper (minutes) as inputs
  - name: Bedtime - Heated sheet start time
    unique_id: bedtime_heated_sheet_start_time
    icon: mdi:heating-coil
    device_class: timestamp
    state: >
      {% set adjustment = (states('input_number.bedtime_preheating_sheet_minutes') | int(default=30)) * 60 %}
      {% set adjusted_time = as_timestamp(states('sensor.bedtime_next_trigger_time')) - adjustment %}
      {{ adjusted_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
    attributes:
      time: >
        {{ as_timestamp(states('sensor.bedtime_heated_sheet_start_time')) | timestamp_custom('%H:%M:%S', true) }}
      hour: >
        {{ (as_timestamp(strptime(state_attr('sensor.bedtime_heated_sheet_start_time', 'time'), '%H:%M:%S')) | timestamp_custom('%H', true)) | int(default=0) }}
      minute:  >
        {{ (as_timestamp(strptime(state_attr('sensor.bedtime_heated_sheet_start_time', 'time'), '%H:%M:%S')) | timestamp_custom('%M', true)) | int(default=0) }}
      second: 0
      timestamp: >
        {{ ((state_attr('sensor.bedtime_heated_sheet_start_time', 'hour') | int(default=0)) * 3600) + ((state_attr('sensor.bedtime_heated_sheet_start_time', 'minute') | int(default=0)) * 60) }}

  # Calculates the veranda automatic lights on time
  # Uses the sunset time if it is before 22:00, or uses that time if not
  - name: Veranda - Lights on time
    unique_id: veranda_lights_on
    icon: mdi:lightbulb-group
    device_class: timestamp
    state: >
      {% set sunset_time = as_timestamp(states('sensor.sun_next_setting')) %}
      {% set default_time = as_timestamp(now().strftime('%Y-%m-%d') + ' 22:00:00') %}
      {% set guard_time = as_timestamp(now().strftime('%Y-%m-%d') + ' 12:00:00') %}
      {% if guard_time < sunset_time < default_time %}
      {{ sunset_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
      {% else %}
      {{ default_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
      {% endif %}

  # Calculates the veranda automatic lights off time
  # Uses the dawn time if it is before 08:00, or uses that time if not
  - name: Veranda - Lights off time
    unique_id: veranda_lights_off
    icon: mdi:lightbulb-group-off-outline
    device_class: timestamp
    state: >
      {% set dawn_time = as_timestamp(states('sensor.sun_next_dawn')) %}
      {% set default_time = as_timestamp(now().strftime('%Y-%m-%d') + ' 08:00:00') %}
      {% if dawn_time < default_time %}
      {{ dawn_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
      {% else %}
      {{ default_time | timestamp_custom('%Y-%m-%dT%H:%M:%S+00:00', false) }}
      {% endif %}

# Apartment average humidity
- sensor:
  - name: Humidity - Apartment average
    unique_id: humidity_apartment_average
    icon: mdi:water-percent
    device_class: humidity
    unit_of_measurement: '%'
    state: >
      {% set sensor_1 = states('sensor.humidity_kitchen') | float(default=0) %}
      {% set sensor_2 = states('sensor.humidity_living') | float(default=0) %}
      {% set sensor_3 = states('sensor.humidity_entry') | float(default=0) %}
      {{ ((sensor_1 + sensor_2 + sensor_3) / 3) | round(0) }}

- sensor:
  - name: Bedtime - Display time
    unique_id: bedtime_display_time
    state: >
      {% set current_time = now() %}
      {% set current_day = current_time.weekday() %}
      {% set current_hour = current_time.hour %}
      {% if current_day == 4 and current_hour >= 20 %}
        weekend
      {% elif current_day == 5 %}
        weekend
      {% elif current_day == 6 and current_hour < 20 %}
        weekend
      {% else %}
        weekday
      {% endif %}

# Momentary power consumption entities
- sensor:
  # Total power consumption of LIGHTS
  - name: Power - Momentary light consumption
    unique_id: power_momentary_light_consumption
    device_class: power
    unit_of_measurement: 'W'
    state: >
      {% set sensors = [
        states('sensor.power_downlight_toilet') | float(default=0),
        states('sensor.power_downlights_bath') | float(default=0),
        states('sensor.power_downlights_entry') | float(default=0),
        states('sensor.power_downlights_living') | float(default=0),
        states('sensor.power_lightstrip_bath') | float(default=0),
        states('sensor.power_lightstrip_kitchen') | float(default=0),
        states('sensor.power_mushroom_living') | float(default=0),
        states('sensor.power_pendant_bedroom') | float(default=0),
        states('sensor.power_pendant_guest') | float(default=0),
        states('sensor.power_pendants_kitchen') | float(default=0),
        states('sensor.power_pendants_living') | float(default=0),
        states('sensor.power_pendants_office') | float(default=0),
        states('sensor.power_spottrack_kitchen') | float(default=0),
        states('sensor.power_spottrack_living') | float(default=0),
        states('sensor.power_stringlights_veranda') | float(default=0)
      ] %}
      {{ sensors | sum }}
  
  # Total power consumption of HEATING
  - name: Power - Momentary heating consumption
    unique_id: power_momentary_heating_consumption
    device_class: power
    unit_of_measurement: 'W'
    state: >
      {% set sensors = [
        states('sensor.power_floor_heat_toilet') | float(default=0),
        states('sensor.power_floor_heat_bath') | float(default=0),
        states('sensor.power_heater_guest') | float(default=0)
      ] %}
      {{ sensors | sum }}
  
  # Total power consumption of STATIC DEVICES (things that should always be on)
  - name: Power - Momentary static devices consumption
    unique_id: power_momentary_static_consumption
    device_class: power
    unit_of_measurement: 'W'
    state: >
      {% set sensors = [
        states('sensor.power_fridge_kitchen') | float(default=0),
        states('sensor.power_freezer_kitchen') | float(default=0),
        states('sensor.power_networking_living') | float(default=0)
      ] %}
      {{ sensors | sum }}

  # Total power consumption of DYNAMIC DEVICES (power-hungry on-demand devcices)
  - name: Power - Momentary dynamic devices consumption
    unique_id: power_momentary_dynamic_consumption
    device_class: power
    unit_of_measurement: 'W'
    state: >
      {% set sensors = [
        states('sensor.power_desktop_pc_office') | float(default=0),
        states('sensor.power_monitordesk_office') | float(default=0),
        states('sensor.power_tv_entertainment_living') | float(default=0)
      ] %}
      {{ sensors | sum }}

  # Total power consumption of OTHER (the rest, untracked devices)
  - name: Power - Other momentary consumption
    unique_id: power_other_momentary_consumption
    device_class: power
    unit_of_measurement: 'W'
    state: >
      {% set total = states('sensor.tibber_power_consumption_realtime') | float(default=0) %}
      {% set lights = states('sensor.power_momentary_light_consumption') | float(default=0) %}
      {% set heating = states('sensor.power_momentary_heating_consumption') | float(default=0) %}
      {% set static = states('sensor.power_momentary_static_consumption') | float(default=0) %}
      {% set dynamic = states('sensor.power_momentary_dynamic_consumption') | float(default=0) %}
      {% if (total - lights - heating - static - dynamic) < 0 %}
        {{ 0 }}
      {% else %}
        {{ total - lights - heating - static - dynamic}}
      {% endif %}