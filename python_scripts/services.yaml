# =========================================================================== #
#
#   PYTHON SCRIPTS
#   --------------
# 
#   Pre-requisites:
#     - Initialize Python Scripts in configuration.yaml
#     - Just declare the line "python_script:" and its done
#
#   Creating new Python Scripts:
#     - Create the file with filename <filename>.py
#     - Code the script
#     - Declare the script here, where the object's name = <filename>
#
#   Good practices:
#     - Python scripts made this way have a very limited, sandbox environment
#     - Its good for simple logic tasks that are too complex for native HA,
#       and that can be achieved with basic Python functions
#     - 'import' is not allowed in this environment, and thus more complex
#       tasks are maybe more worthwhile with other solutions
#     - Example: Many datetime-functions doesn't work, but some are available
#       through the embedded 'dt_util' module.
#
# =========================================================================== #

calculate_middle_time:
  name: Calculate middle time
  description: Takes two times as input, the 1st one must before the 2nd, and finds the middle time between those
  fields:
    time1:
      description: The 1st time-point
      example: "2023-01-23T12:34:56+00:00"
    time2:
      description: The 2nd time-point
      example: "2023-01-23T13:45:56+00:00"
    entity_id:
      description: The input_datetime helper that should store the result
      example: input_datetime.noonset

brightness_interval:
  name: Brightness interval
  description: Calculates which interval the brightness value (0-255) of a light belongs to, as percent (0-100).
  fields:
    brightness:
      description: The brightness value (0-255, "null")
      example: "128"
    entity_id:
      description: The sensor entity that should store the result
      example: sensor.dim_pendant_office

power_compare_maxhours:
  name: Compare new hour to top 3 maxhours this month
  description: Takes a newly recorded hour power consumption and compares it to the top 3 maxhours of this month
  fields:
    newhour_value:
      description: Power consumption of the newly recorded hour, in kWh
      example: 1.23
    newhour_time:
      description: Date and time for when the recorded hour started
      example: "2023-01-23T12:00:00"
    top_maxhour_val_1:
      description: Power consumption entity of the top 1 max-hour this month, in kWh
      example: input_number.power_monthly_highest_max_hour_1
    top_maxhour_time_1:
      description: Date and time entity for when the top 1 max-hour this month started
      example: input_datetime.power_monthly_highest_max_hour_1
    top_maxhour_val_2:
      description: Power consumption entity of the top 2 max-hour this month, in kWh
      example: input_number.power_monthly_highest_max_hour_2
    top_maxhour_time_2:
      description: Date and time entity for when the top 2 max-hour this month started
      example: input_datetime.power_monthly_highest_max_hour_2
    top_maxhour_val_3:
      description: Power consumption entity of the top 3 max-hour this month, in kWh
      example: input_number.power_monthly_highest_max_hour_3
    top_maxhour_time_3:
      description: Date and time entity for when the top 3 max-hour this month started
      example: input_datetime.power_monthly_highest_max_hour_3
    top_maxhour_val_4:
      description: Power consumption entity of the top 4 max-hour this month, in kWh
      example: input_number.power_monthly_highest_max_hour_4
    top_maxhour_time_4:
      description: Date and time entity for when the top 3 max-hour this month started
      example: input_datetime.power_monthly_highest_max_hour_4

cleaning_room_add:
  name: Add room for cleaning
  description: Adds the specified room to a list of rooms to be cleaned by robot vacuum
  fields:
    entity_id:
      description: The input_text-helper that stores the array
      example: input_text.selected_room_ids_cleaning
    room_id:
      description: The integer number id that represents the room to add
      example: 16

cleaning_room_remove:
  name: Remove room for cleaning
  description: Removes the specified room from the list of rooms to be cleaned by robot vacuum
  fields:
    entity_id:
      description: The input_text-helper that stores the array
      example: input_text.selected_room_ids_cleaning
    room_id:
      description: The integer number id that represents the room to remove
      example: 16

vacuum_list_to_string:
  name: Vacuum list to string
  description: Turns a boolean list of rooms to a string of readable room names
  fields:
    kitchen:
      description: Is kitchen among the target rooms, true/false
    living:
      description: Is living room among the target rooms, true/false
    entry:
      description: Is entry among the target rooms, true/false
    bedroom:
      description: Is bedroom among the target rooms, true/false
    office:
      description: Is office among the target rooms, true/false
    guest:
      description: Is guest room among the target rooms, true/false

change_time:
  name: Change time
  description: The time-entity is updated by adding/subtracting delta_minutes to/from the entity.
  fields:
    delta_minutes:
      description: Minutes to add/subtract
      example: -5
    entity_id:
      description: The input_datetime helper that should store the result
      example: input_datetime.wakeup_alarm_weekdays