# Entur / Ruter holdeplass sanntidsdata om avganger
- platform: entur_public_transport
  name: Ruter
  expand_platforms: true
  show_on_map: true
  number_of_departures: 4
  stop_ids:
    - "NSR:StopPlace:58185" # Sandaker senter
    - "NSR:StopPlace:58256" # Torshov
    - "NSR:StopPlace:6404" # Haarklous plass
    - "NSR:StopPlace:58195" # Storo

# Tibber future prices - Electricity provider
- platform: rest
  name: Tibber Prices
  resource: https://api.tibber.com/v1-beta/gql
  method: POST
  payload: '{ "query": "{ viewer { homes { currentSubscription { status priceInfo { current { total } today { total } tomorrow { total } } } } } }" }'
  json_attributes_path: "$.data.viewer.homes[0].currentSubscription.priceInfo"
  json_attributes:
    - today
    - tomorrow
  value_template: "{{ value_json.data.viewer.homes[0].currentSubscription.priceInfo.current.total | float }}"
  scan_interval: 30
  headers:
    Authorization: !secret tibber_token
    Content-Type: application/json
    User-Agent: REST
  unit_of_measurement: NOK/kWh

# Elvia grid company - "Fastledd" ("fixedPrice") limits and prices
# Requests should not exceed 200/hour
# Questions for Are:
# - is version "1.0" the latest?
# - 2024-03-11T15:00:00 - 2024-03-11T16:00:00 fungerer som StartTime - EndTime, men da får jeg tilbake 16-17
# 2024-03-11T15:00:00+01:00 - 2024-03-11T16:00:00+01:00 derimot gir errors. "is not valid for EndTime."
- platform: rest
  name: Elvia fixed (fastprisledd) limits and prices for today
  unique_id: elvia_fixed_prices
  icon: mdi:transmission-tower
  scan_interval: 60
  # Request
  resource: https://elvia.azure-api.net/grid-tariff/digin/api/1.0/tariffquery
  method: GET
  headers:
    X-API-Key: !secret elvia_api_key
  params:
    TariffKey: standard
    Range: today
  # Response
  value_template: >
    {{ value_json.gridTariff.tariffPrice.priceInfo.fixedPrices[0].startDate }}
  json_attributes_path: "$.gridTariff.tariffPrice.priceInfo.fixedPrices[0]"
  json_attributes:
    - priceLevels

# Elvia hourly, flat variable pricing (energiledd) - NOK/kWh
# As of initial configuration (11.03.2024), valid for Jan.-March 2024 there are two pricings:
# - 0.3959 NOK/kWh 0600-2200 on weekdays
# - 0.3209 NOK/kWh 2200-0600 on weekdays. Also for entire weekends and public holidays.
# The price is including tax and fees.
# This API request fetches the price dynamically for the current hour
# It will automatically get new prices when the original model is outdated.
- platform: rest
  name: Elvia variable kWh pricing, current hour
  unique_id: elvia_hourly_variable_price
  icon: mdi:transmission-tower
  scan_interval: 60
  # Request
  resource: https://elvia.azure-api.net/grid-tariff/digin/api/1.0/tariffquery
  method: GET
  headers:
    X-API-Key: !secret elvia_api_key
  params:
    TariffKey: standard
    # This calculation handles subtracting TZ-info from the target datetimes
    # Accepted format: yyyy-mm-ddTHH:MM:SS. Adding TZ-info is not supported (+HH:MM)
    # However, the returned time is adjusted for timezone.
    StartTime: >
      {% set tz_hours = now().isoformat().split('+')[1].split(':')[0] | int %}
      {{ ( now() + timedelta(hours=(0-tz_hours)) ).strftime('%Y-%m-%dT%H:00:00') }}
    EndTime: >
      {% set tz_hours = now().isoformat().split('+')[1].split(':')[0] | int %}
      {{ ( now() + timedelta(hours=(1-tz_hours )) ).strftime('%Y-%m-%dT%H:00:00') }}
  # Response
  value_template: >
    {{ value_json.gridTariff.tariffPrice.hours[0].energyPrice.total }}
  json_attributes_path: "$.gridTariff.tariffPrice.hours[0]"
  json_attributes:
  - shortName
  - startTime
  - expiredAt
  - isPublicHoliday

# Elvia variable prices 48h forecast: Today & tomorrow
- platform: rest
  name: 'Elvia variable kWh pricing: Now, today and tomorrow'
  unique_id: elvia_variable_price
  icon: mdi:transmission-tower
  scan_interval: 60
  # Request
  resource: https://elvia.azure-api.net/grid-tariff/digin/api/1.0/tariffquery
  method: GET
  headers:
    X-API-Key: !secret elvia_api_key
  params:
    TariffKey: standard
    StartTime: >
      {% set tz_hours = now().isoformat().split('+')[1].split(':')[0] | int %}
      {% set today_start = now().replace(hour=0, minute=0, second=0, microsecond=0) %}
      {{ ( today_start + timedelta(hours=(0-tz_hours)) ).strftime('%Y-%m-%dT%H:00:00') }}
    EndTime: >
      {% set tz_hours = now().isoformat().split('+')[1].split(':')[0] | int %}
      {% set tomorrow_end = (now() + timedelta(days=2)).replace(hour=0, minute=0, second=0, microsecond=0) %}
      {{ ( tomorrow_end + timedelta(hours=(0-tz_hours)) ).strftime('%Y-%m-%dT%H:00:00') }}
  # Response
  value_template: >
    {% set hour = now().hour %}
    {{ value_json.gridTariff.tariffPrice.hours[hour].energyPrice.total }}
  json_attributes_path: "$.gridTariff.tariffPrice"
  json_attributes:
  - hours
  
# Time and date as sensors
- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "date_time_utc"
    - "date_time_iso"
    - "time_date"
    - "time_utc"

# All template sensors
- platform: template
  sensors:
    # Readable string for week-day, as sensor
    day:
      friendly_name: "Weekday name"
      value_template: >
        {% set days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] %}
        {{ days[now().weekday()] }}

    day_nor:
      friendly_name: "Weekday name, Norwegian"
      value_template: >
        {% set days = ["Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag", "Søndag"] %}
        {{ days[now().weekday()] }}
    
    # Readable string for month, as sensor
    month:
      friendly_name: "Month name"
      value_template: >
        {% set months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] %}
        {{ months[now().month-1] }} 

    month_nor:
      friendly_name: "Month name, Norwegian"
      value_template: >
        {% set months = ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"] %}
        {{ months[now().month-1] }}
    
    # Formats the week-day and date into a humanly readable sentence for UI, as sensor
    date_string:
      value_template: >
        {% set day = now().day %}
        {% set ordinal = 'th' if 11 <= day <= 13 else {1: 'st', 2: 'nd', 3: 'rd'}.get(day % 10, 'th') %}
        {{ states('sensor.day') ~ ', ' ~ states('sensor.month') ~ ' ' ~ day ~ ordinal ~ now().strftime(' %Y') }}

    date_string_nor:
      friendly_name: "Full date, Norwegian"
      value_template: "{{ states('sensor.day_nor') }}, {{ now().day }}.  {{ states('sensor.month_nor') }} {{ now().year }}"
    
    # Temperature sensor for Kitchen Heater
    panel_temperature_kitchen:
      friendly_name: "Kitchen temperature, measured by panel heater"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('climate.heater_kitchen', 'current_temperature') }}"
      device_class: temperature

    # Temperature sensor for Kitchen Heater
    panel_temperature_living:
      friendly_name: "Living room temperature, measured by panel heater"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('climate.heater_living', 'current_temperature') }}"
      device_class: temperature
  
    # Temperature sensor for Kitchen Heater
    panel_temperature_bedroom:
      friendly_name: "Bedroom temperature, measured by panel heater"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('climate.heater_bedroom', 'current_temperature') }}"
      device_class: temperature

    # Temperature sensor for current outdoor weather from weather integration
    temperature_outdoor:
      friendly_name: "Outdoor current temperature"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('weather.yr_weather_home', 'temperature') }}"
      device_class: temperature
    
    # Humidity sensor for current outdoor humidity
    humidity_outdoor:
      friendly_name: "Outdoor current humidity"
      unit_of_measurement: "%"
      value_template: "{{ state_attr('weather.yr_weather_home', 'humidity') }}"
      device_class: humidity

    # Finds the current setting of the physical remote for the heated sheet
    heated_sheet_setting:
      friendly_name: "Heated Sheet - Control setting"
      value_template: >-
        {% if states('sensor.power_heated_sheet')|float >= 0 and states('sensor.power_heated_sheet')|float < 1 %}
          Off
        {% elif states('sensor.power_heated_sheet')|float >= 15 and states('sensor.power_heated_sheet')|float <= 20 %}
          #1
        {% elif states('sensor.power_heated_sheet')|float >= 28 and states('sensor.power_heated_sheet')|float <= 40 %}
          Feet
        {% elif states('sensor.power_heated_sheet')|float >= 50 and states('sensor.power_heated_sheet')|float <= 80 %}
          #2
        {% else %}
          On
        {% endif %}
    
    # Dedicated sensor for robot vacuum battery status
    esmeralda_battery:
      friendly_name: "Esmeralda battery status"
      unit_of_measurement: "%"
      value_template: "{{ state_attr('vacuum.esmeralda', 'battery_level') }}"
      device_class: battery

    # Translates the robot vacuum fan-speed from default Xiaomi to Roborock terminology
    esmeralda_fan_speed:
      friendly_name: "Esmeralda current fan-speed"
      value_template: >-
        {% set fan_speed = state_attr('vacuum.esmeralda', 'fan_speed') %}
        {% if fan_speed == "Silent" %}
          Quiet
        {% elif fan_speed == "Standard" %}
          Balanced
        {% elif fan_speed == "Medium" %}
          Turbo
        {% elif fan_speed == "Turbo" %}
          Max
        {% elif fan_speed == "105" %}
          Off
        {% else %}
          Unknown
        {% endif %}

    # Total cost this month for electric grid usage. Billed to Elvia
    elvia_monthly_total:
      friendly_name: "Current monthly total, Elvia grid usage"
      device_class: monetary
      unit_of_measurement: NOK
      value_template: >
        {{ (states('sensor.elvia_active_fixed_price_level') | float(default=0)) + (states('input_number.power_grid_monthly_variable_price') | float(default=0)) }}
    
    # Total cost for power (Tibber and Elvia) for the current hour
    energy_price_hourly_total:
      friendly_name: "Current hour energy price total, Elvia and Tibber"
      device_class: monetary
      unit_of_measurement: NOK/kWh
      value_template: >
        {% set energy = states('sensor.tibber_prices') | float(default=0) %}
        {% set grid = states('sensor.elvia_variable_pricing') | float(default=0) %}
        {{ energy + grid }}
