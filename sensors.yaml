# ###########################################################
# MACRO DEFINITIONS
# ###########################################################
{% macro dim_interval(brightness) %}
  {% if brightness <= 0 %}
    0
  {% elif brightness > 0 and brightness <= 5 %}
    5
  {% elif brightness > 5 and brightness <= 10 %}
    10
  {% elif brightness > 10 and brightness <= 15 %}
    15
  {% elif brightness > 15 and brightness <= 20 %}
    20
  {% elif brightness > 20 and brightness <= 25 %}
    25
  {% elif brightness > 25 and brightness <= 30 %}
    30
  {% elif brightness > 30 and brightness <= 40 %}
    40
  {% elif brightness > 40 and brightness <= 50 %}
    50
  {% elif brightness > 50 and brightness <= 60 %}
    60
  {% elif brightness > 60 and brightness <= 70 %}
    70
  {% elif brightness > 70 and brightness <= 80 %}
    80
  {% elif brightness > 80 and brightness <= 90 %}
    90
  {% elif brightness > 90 %}
    100
  {% else %}
    0
  {% endif %}
{% endmacro %}

# ###########################################################
# SENSORS
# ###########################################################

# Entur / Ruter holdeplass sanntidsdata om avganger
- platform: entur_public_transport
  name: Ruter
  expand_platforms: true
  show_on_map: true
  number_of_departures: 4
  stop_ids:
    - "NSR:StopPlace:58185" # Sandaker senter
    - "NSR:StopPlace:58256" # Torshov
    - "NSR:StopPlace:6404" # Haarklous plass
    - "NSR:StopPlace:58195" # Storo

  # Tibber future prices
- platform: rest
  name: Tibber Prices
  resource: https://api.tibber.com/v1-beta/gql
  method: POST
  payload: '{ "query": "{ viewer { homes { currentSubscription { status priceInfo { current { total } today { total } tomorrow { total } } } } } }" }'
  json_attributes_path: "$.data.viewer.homes[0].currentSubscription.priceInfo"
  json_attributes:
    - today
    - tomorrow
  value_template: "{{ value_json.data.viewer.homes[0].currentSubscription.priceInfo.current.total | float }}"
  scan_interval: 30
  headers:
    Authorization: !secret tibber_token
    Content-Type: application/json
    User-Agent: REST
  unit_of_measurement: NOK/kWh

  # Time and date as sensors
- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "date_time_utc"
    - "date_time_iso"
    - "time_date"
    - "time_utc"
    - "beat"

  # Dashboard date-string
- platform: template
  sensors:
    ## Converts time and date into sentence for UI
    day:
      value_template: >
        {% set days = ["Mandag", "Tirsdag", "Onsdag", "Torsdag", "Fredag", "Lørdag", "Søndag"] %}
        {{ days[now().weekday()] }}

    month:
      value_template: >
        {% set months = ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"] %}
        {{ months[now().month-1] }}

    date_string:
      friendly_name: "Full Date"
      value_template: "{{ states('sensor.day') }}, {{ now().day }}.  {{ states('sensor.month') }} {{ now().year }}"

    # Temperature sensor for Kitchen Heater
    kitchen_temperature:
      friendly_name: "Kitchen Heater measured temperature"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('climate.kitchen_heater', 'current_temperature') }}"
      device_class: temperature

    # Temperature sensor for current outdoor weather from weather integration
    outdoor_temperature:
      friendly_name: "Outdoor current temperature"
      unit_of_measurement: "°C"
      value_template: "{{ state_attr('weather.yr_weather_home', 'temperature') }}"
      device_class: temperature

    heated_sheet_setting:
      friendly_name: "Heated Sheet - Control setting"
      value_template: >-
        {% if states('sensor.heated_sheet_switch_switch_0_power')|float >= 0 and states('sensor.heated_sheet_switch_switch_0_power')|float < 1 %}
          Off
        {% elif states('sensor.heated_sheet_switch_switch_0_power')|float >= 15 and states('sensor.heated_sheet_switch_switch_0_power')|float <= 20 %}
          #1
        {% elif states('sensor.heated_sheet_switch_switch_0_power')|float >= 28 and states('sensor.heated_sheet_switch_switch_0_power')|float <= 40 %}
          Feet
        {% elif states('sensor.heated_sheet_switch_switch_0_power')|float >= 50 and states('sensor.heated_sheet_switch_switch_0_power')|float <= 80 %}
          #2
        {% else %}
          On
        {% endif %}
    
    # Floorplan light brightness (dim) sensors
    dim_pendant_bedroom:
      friendly_name: "Bedroom pendant brightness level"
      value_template : >-
        {% set brightness = (state_attr('light.pendant_bedroom', 'brightness') | default(0) / 255 * 100) | round %}
        {% if brightness <= 0 %}
          0
        {% elif brightness > 0 and brightness <= 5 %}
          5
        {% elif brightness > 5 and brightness <= 10 %}
          10
        {% elif brightness > 10 and brightness <= 15 %}
          15
        {% elif brightness > 15 and brightness <= 20 %}
          20
        {% elif brightness > 20 and brightness <= 25 %}
          25
        {% elif brightness > 25 and brightness <= 30 %}
          30
        {% elif brightness > 30 and brightness <= 40 %}
          40
        {% elif brightness > 40 and brightness <= 50 %}
          50
        {% elif brightness > 50 and brightness <= 60 %}
          60
        {% elif brightness > 60 and brightness <= 70 %}
          70
        {% elif brightness > 70 and brightness <= 80 %}
          80
        {% elif brightness > 80 and brightness <= 90 %}
          90
        {% elif brightness > 90 %}
          100
        {% else %}
          0
        {% endif %}
    
    dim_pendants_office:
      friendly_name: "Office pendants brightness level"
      value_template : >-
        {% dim_interval((state_attr('light.pendants_office', 'brightness') | default(0) / 255 * 100) | round) %}

    
    